#!/usr/bin/env python3
"""
Livelo Analytics - Sistema de Notifica√ß√µes Push
Envia notifica√ß√µes Firebase para usu√°rios com favoritos em oferta
"""

import os
import sys
import json
import requests
import pandas as pd
from datetime import datetime, timedelta
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class LiveloNotificationSender:
    def __init__(self):
        # Configura√ß√µes do Firebase (via secrets do GitHub)
        self.project_id = os.getenv('FIREBASE_PROJECT_ID')
        self.server_key = os.getenv('FIREBASE_SERVER_KEY')
        self.fcm_url = f"https://fcm.googleapis.com/fcm/send"
        
        # Verificar se vari√°veis est√£o configuradas
        if not self.project_id or not self.server_key:
            logger.error("‚ùå FIREBASE_PROJECT_ID ou FIREBASE_SERVER_KEY n√£o configurados")
            sys.exit(1)
            
        logger.info(f"‚úÖ Firebase configurado para projeto: {self.project_id}")
        
        # Dados dos parceiros
        self.dados_hoje = None
        self.dados_ontem = None
        
    def carregar_dados(self):
        """Carrega dados do Excel"""
        try:
            if not os.path.exists('livelo_parceiros.xlsx'):
                logger.error("‚ùå Arquivo livelo_parceiros.xlsx n√£o encontrado")
                return False
                
            df = pd.read_excel('livelo_parceiros.xlsx')
            df['Timestamp'] = pd.to_datetime(df['Timestamp'])
            
            # Separar dados por data
            datas_unicas = sorted(df['Timestamp'].dt.date.unique(), reverse=True)
            
            if len(datas_unicas) >= 1:
                data_hoje = datas_unicas[0]
                self.dados_hoje = df[df['Timestamp'].dt.date == data_hoje].copy()
                logger.info(f"üìä Dados de hoje ({data_hoje}): {len(self.dados_hoje)} registros")
            
            if len(datas_unicas) >= 2:
                data_ontem = datas_unicas[1]
                self.dados_ontem = df[df['Timestamp'].dt.date == data_ontem].copy()
                logger.info(f"üìä Dados de ontem ({data_ontem}): {len(self.dados_ontem)} registros")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar dados: {e}")
            return False
    
    def detectar_mudancas_ofertas(self):
        """Detecta quais parceiros ganharam/perderam ofertas"""
        if self.dados_ontem is None:
            logger.warning("‚ö†Ô∏è Sem dados de ontem - n√£o √© poss√≠vel detectar mudan√ßas")
            return {'ganharam_oferta': [], 'perderam_oferta': []}
        
        mudancas = {'ganharam_oferta': [], 'perderam_oferta': []}
        
        # Preparar dados de hoje e ontem
        hoje_dict = {}
        for _, row in self.dados_hoje.iterrows():
            chave = f"{row['Parceiro']}|{row['Moeda']}"
            hoje_dict[chave] = {
                'parceiro': row['Parceiro'],
                'moeda': row['Moeda'],
                'oferta': row['Oferta'] == 'Sim',
                'pontos': row['Pontos'],
                'valor': row['Valor']
            }
        
        ontem_dict = {}
        for _, row in self.dados_ontem.iterrows():
            chave = f"{row['Parceiro']}|{row['Moeda']}"
            ontem_dict[chave] = {
                'parceiro': row['Parceiro'],
                'moeda': row['Moeda'],
                'oferta': row['Oferta'] == 'Sim',
                'pontos': row['Pontos'],
                'valor': row['Valor']
            }
        
        # Detectar mudan√ßas
        for chave in hoje_dict:
            if chave in ontem_dict:
                hoje_data = hoje_dict[chave]
                ontem_data = ontem_dict[chave]
                
                # Ganhou oferta
                if hoje_data['oferta'] and not ontem_data['oferta']:
                    mudancas['ganharam_oferta'].append({
                        'parceiro': hoje_data['parceiro'],
                        'moeda': hoje_data['moeda'],
                        'pontos': hoje_data['pontos'],
                        'valor': hoje_data['valor'],
                        'chave': chave
                    })
                
                # Perdeu oferta
                elif not hoje_data['oferta'] and ontem_data['oferta']:
                    mudancas['perderam_oferta'].append({
                        'parceiro': hoje_data['parceiro'],
                        'moeda': hoje_data['moeda'],
                        'pontos': hoje_data['pontos'],
                        'valor': hoje_data['valor'],
                        'chave': chave
                    })
        
        logger.info(f"üéØ Detectadas {len(mudancas['ganharam_oferta'])} novas ofertas")
        logger.info(f"üìâ Detectadas {len(mudancas['perderam_oferta'])} ofertas finalizadas")
        
        return mudancas
    
    def obter_tokens_usuarios(self):
        """Obt√©m tokens FCM dos usu√°rios (simulado - na pr√°tica viria de um banco de dados)"""
        # Por enquanto, vamos usar um sistema baseado em arquivos
        # Na produ√ß√£o, isso seria um banco de dados
        
        tokens_file = 'user_fcm_tokens.json'
        if os.path.exists(tokens_file):
            try:
                with open(tokens_file, 'r') as f:
                    tokens_data = json.load(f)
                logger.info(f"üì± {len(tokens_data)} tokens de usu√°rios encontrados")
                return tokens_data
            except Exception as e:
                logger.error(f"‚ùå Erro ao ler tokens: {e}")
        
        # Arquivo de exemplo (ser√° criado na primeira execu√ß√£o)
        example_tokens = {
            "exemplo_user_1": {
                "fcm_token": "EXEMPLO_TOKEN_FCM_AQUI",
                "favoritos": ["Netshoes|R$", "Magazine Luiza|R$"],
                "ativo": True,
                "ultimo_acesso": datetime.now().isoformat()
            }
        }
        
        try:
            with open(tokens_file, 'w') as f:
                json.dump(example_tokens, f, indent=2)
            logger.info(f"üìÑ Arquivo exemplo criado: {tokens_file}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar arquivo exemplo: {e}")
        
        return {}
    
    def enviar_notificacao_push(self, token, titulo, corpo, dados_extras=None):
        """Envia notifica√ß√£o push via Firebase FCM"""
        headers = {
            'Authorization': f'key={self.server_key}',
            'Content-Type': 'application/json'
        }
        
        payload = {
            'to': token,
            'notification': {
                'title': titulo,
                'body': corpo,
                'icon': 'https://via.placeholder.com/192x192/ff0a8c/ffffff?text=L',
                'badge': 'https://via.placeholder.com/96x96/ff0a8c/ffffff?text=L',
                'click_action': 'https://gc-livelo-analytics.github.io/',
                'tag': 'livelo-offer'
            },
            'data': dados_extras or {},
            'webpush': {
                'headers': {
                    'Urgency': 'high'
                },
                'notification': {
                    'icon': 'https://via.placeholder.com/192x192/ff0a8c/ffffff?text=L',
                    'badge': 'https://via.placeholder.com/96x96/ff0a8c/ffffff?text=L',
                    'requireInteraction': True,
                    'actions': [
                        {
                            'action': 'view',
                            'title': 'üëÄ Ver Oferta'
                        },
                        {
                            'action': 'dismiss', 
                            'title': '‚úñÔ∏è Dispensar'
                        }
                    ]
                }
            }
        }
        
        try:
            response = requests.post(self.fcm_url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success', 0) > 0:
                    logger.info(f"‚úÖ Notifica√ß√£o enviada com sucesso")
                    return True
                else:
                    logger.error(f"‚ùå Falha no envio: {result}")
                    return False
            else:
                logger.error(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar notifica√ß√£o: {e}")
            return False
    
    def processar_notificacoes(self):
        """Processa e envia notifica√ß√µes para usu√°rios relevantes"""
        # Detectar mudan√ßas
        mudancas = self.detectar_mudancas_ofertas()
        
        # Obter tokens de usu√°rios
        usuarios = self.obter_tokens_usuarios()
        
        if not usuarios:
            logger.warning("‚ö†Ô∏è Nenhum usu√°rio registrado para notifica√ß√µes")
            return
        
        notificacoes_enviadas = 0
        
        for user_id, user_data in usuarios.items():
            if not user_data.get('ativo', False):
                continue
                
            token = user_data.get('fcm_token')
            favoritos = user_data.get('favoritos', [])
            
            if not token or not favoritos:
                continue
            
            # Verificar se algum favorito ganhou oferta
            favoritos_com_nova_oferta = []
            
            for oferta in mudancas['ganharam_oferta']:
                chave_oferta = oferta['chave']
                if chave_oferta in favoritos:
                    favoritos_com_nova_oferta.append(oferta)
            
            # Enviar notifica√ß√£o se houver ofertas relevantes
            if favoritos_com_nova_oferta:
                if len(favoritos_com_nova_oferta) == 1:
                    oferta = favoritos_com_nova_oferta[0]
                    titulo = f"üéØ {oferta['parceiro']} em oferta!"
                    pontos_por_moeda = oferta['pontos'] / oferta['valor'] if oferta['valor'] > 0 else 0
                    corpo = f"{pontos_por_moeda:.1f} pontos por {oferta['moeda']} - Aproveite agora!"
                    
                    dados_extras = {
                        'parceiro': oferta['parceiro'],
                        'moeda': oferta['moeda'],
                        'pontos': str(oferta['pontos']),
                        'valor': str(oferta['valor']),
                        'url': 'https://gc-livelo-analytics.github.io/'
                    }
                else:
                    titulo = f"üî• {len(favoritos_com_nova_oferta)} favoritos em oferta!"
                    parceiros = [o['parceiro'] for o in favoritos_com_nova_oferta[:3]]
                    corpo = f"{', '.join(parceiros)}{'...' if len(favoritos_com_nova_oferta) > 3 else ''} - Confira no app!"
                    
                    dados_extras = {
                        'total_ofertas': str(len(favoritos_com_nova_oferta)),
                        'url': 'https://gc-livelo-analytics.github.io/'
                    }
                
                # Enviar notifica√ß√£o
                if self.enviar_notificacao_push(token, titulo, corpo, dados_extras):
                    notificacoes_enviadas += 1
                    logger.info(f"üì± Notifica√ß√£o enviada para {user_id}")
        
        logger.info(f"üöÄ Total de notifica√ß√µes enviadas: {notificacoes_enviadas}")
        
        # Salvar estat√≠sticas
        stats = {
            'timestamp': datetime.now().isoformat(),
            'novas_ofertas': len(mudancas['ganharam_oferta']),
            'ofertas_finalizadas': len(mudancas['perderam_oferta']),
            'usuarios_registrados': len(usuarios),
            'notificacoes_enviadas': notificacoes_enviadas
        }
        
        try:
            with open('notification_stats.json', 'w') as f:
                json.dump(stats, f, indent=2)
            logger.info("üìä Estat√≠sticas salvas em notification_stats.json")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar estat√≠sticas: {e}")
    
    def executar(self):
        """Executa o processo completo de notifica√ß√µes"""
        logger.info("üöÄ Iniciando sistema de notifica√ß√µes Livelo Analytics")
        
        # Carregar dados
        if not self.carregar_dados():
            logger.error("‚ùå Falha ao carregar dados - abortando")
            return False
        
        # Processar e enviar notifica√ß√µes
        self.processar_notificacoes()
        
        logger.info("‚úÖ Processo de notifica√ß√µes conclu√≠do")
        return True

def main():
    """Fun√ß√£o principal"""
    sender = LiveloNotificationSender()
    sucesso = sender.executar()
    
    if not sucesso:
        sys.exit(1)

if __name__ == "__main__":
    main()
