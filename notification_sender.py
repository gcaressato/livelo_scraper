#!/usr/bin/env python3
"""
Sistema de Notifica√ß√µes Livelo
Mant√©m todas as funcionalidades originais mas n√£o quebra o sistema principal
Funciona com Firebase Admin SDK v2 (sem API legada)
"""

import os
import sys
import json
import logging
import pandas as pd
from datetime import datetime, timedelta
import traceback

# Configurar logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('notifications.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LiveloNotificationSender:
    def __init__(self):
        self.firebase_configurado = False
        self.admin_sdk = None
        self.messaging = None
        self.projeto_id = None
        self.service_account_data = None
        self.vapid_key = None
        
        # Estat√≠sticas
        self.stats = {
            'usuarios_ativos': 0,
            'notificacoes_enviadas': 0,
            'notificacoes_falharam': 0,
            'mudancas_detectadas': 0,
            'favoritos_processados': 0
        }
        
    def verificar_configuracao_firebase(self):
        """Verifica e configura Firebase Admin SDK"""
        logger.info("üîç Verificando configura√ß√£o Firebase...")
        
        try:
            # 1. Verificar vari√°veis de ambiente
            self.projeto_id = os.getenv('FIREBASE_PROJECT_ID')
            service_account_json = os.getenv('FIREBASE_SERVICE_ACCOUNT')
            self.vapid_key = os.getenv('FIREBASE_VAPID_KEY')
            
            if not self.projeto_id:
                logger.info("‚ÑπÔ∏è FIREBASE_PROJECT_ID n√£o configurado")
                return False
                
            if not service_account_json:
                logger.info("‚ÑπÔ∏è FIREBASE_SERVICE_ACCOUNT n√£o configurado")
                return False
                
            if not self.vapid_key:
                logger.info("‚ÑπÔ∏è FIREBASE_VAPID_KEY n√£o configurado")
                return False
            
            # 2. Verificar se firebase-admin est√° instalado
            try:
                import firebase_admin
                from firebase_admin import credentials, messaging
                logger.info("‚úÖ firebase-admin dispon√≠vel")
            except ImportError:
                logger.info("‚ÑπÔ∏è firebase-admin n√£o instalado")
                logger.info("üí° Para instalar: pip install firebase-admin")
                return False
            
            # 3. Parse e valida√ß√£o do service account
            try:
                self.service_account_data = json.loads(service_account_json)
                
                # Verificar campos obrigat√≥rios
                campos_obrigatorios = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email']
                for campo in campos_obrigatorios:
                    if campo not in self.service_account_data:
                        logger.warning(f"‚ö†Ô∏è Campo obrigat√≥rio ausente no service account: {campo}")
                        return False
                
                if self.service_account_data.get('type') != 'service_account':
                    logger.warning("‚ö†Ô∏è Service account deve ser do tipo 'service_account'")
                    return False
                    
                logger.info(f"‚úÖ Service account v√°lido para projeto: {self.service_account_data.get('project_id')}")
                
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è FIREBASE_SERVICE_ACCOUNT n√£o √© um JSON v√°lido: {e}")
                return False
            
            # 4. Inicializar Firebase Admin SDK
            try:
                # Criar credenciais
                cred = credentials.Certificate(self.service_account_data)
                
                # Verificar se j√° foi inicializado
                if not firebase_admin._apps:
                    firebase_admin.initialize_app(cred, {
                        'projectId': self.projeto_id
                    })
                    logger.info("üî• Firebase Admin SDK inicializado")
                else:
                    logger.info("üî• Firebase Admin SDK j√° estava inicializado")
                
                # Configurar messaging
                self.messaging = messaging
                self.firebase_configurado = True
                
                logger.info(f"‚úÖ Firebase configurado completamente para: {self.projeto_id}")
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao inicializar Firebase Admin SDK: {e}")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro geral na configura√ß√£o Firebase: {e}")
            return False
    
    def carregar_tokens_usuarios(self):
        """Carrega e valida tokens FCM dos usu√°rios"""
        logger.info("üì± Carregando tokens dos usu√°rios...")
        
        try:
            if not os.path.exists('user_fcm_tokens.json'):
                logger.info("‚ÑπÔ∏è user_fcm_tokens.json n√£o encontrado")
                logger.info("üí° Crie o arquivo com tokens FCM dos usu√°rios")
                return []
            
            with open('user_fcm_tokens.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            usuarios_validos = []
            usuarios_processados = 0
            
            for usuario_id, dados in data.items():
                usuarios_processados += 1
                
                # Pular metadados (come√ßam com _)
                if usuario_id.startswith('_'):
                    continue
                    
                # Validar estrutura do usu√°rio
                if not isinstance(dados, dict):
                    logger.warning(f"‚ö†Ô∏è Usu√°rio {usuario_id}: dados inv√°lidos")
                    continue
                
                # Verificar se est√° ativo
                if not dados.get('ativo', False):
                    logger.debug(f"‚è≠Ô∏è Usu√°rio {usuario_id}: inativo")
                    continue
                
                # Verificar token FCM
                token = dados.get('fcm_token', '')
                if not token or len(token) < 20:
                    logger.warning(f"‚ö†Ô∏è Usu√°rio {usuario_id}: token FCM inv√°lido")
                    continue
                
                # Validar favoritos
                favoritos = dados.get('favoritos', [])
                if not isinstance(favoritos, list):
                    logger.warning(f"‚ö†Ô∏è Usu√°rio {usuario_id}: favoritos deve ser uma lista")
                    favoritos = []
                
                # Validar configura√ß√µes
                config_padrao = {
                    'notificar_novas_ofertas': True,
                    'apenas_favoritos': True,
                    'notificar_grandes_mudancas': False,
                    'notificar_perdeu_oferta': False
                }
                
                configuracoes = dados.get('configuracoes', {})
                if not isinstance(configuracoes, dict):
                    configuracoes = {}
                
                # Mesclar com padr√µes
                config_final = {**config_padrao, **configuracoes}
                
                usuario_valido = {
                    'id': usuario_id,
                    'token': token,
                    'favoritos': favoritos,
                    'configuracoes': config_final,
                    'observacoes': dados.get('observacoes', ''),
                    'registrado_em': dados.get('registrado_em', datetime.now().isoformat())
                }
                
                usuarios_validos.append(usuario_valido)
                logger.debug(f"‚úÖ Usu√°rio {usuario_id}: {len(favoritos)} favoritos")
            
            self.stats['usuarios_ativos'] = len(usuarios_validos)
            logger.info(f"üìä {len(usuarios_validos)} usu√°rios ativos de {usuarios_processados} processados")
            
            return usuarios_validos
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar tokens: {e}")
            logger.error(f"Trace: {traceback.format_exc()}")
            return []
    
    def analisar_mudancas_ofertas(self):
        """Analisa mudan√ßas nas ofertas baseado nos dados coletados"""
        logger.info("üìä Analisando mudan√ßas nas ofertas...")
        
        try:
            # Verificar se existem dados
            if not os.path.exists('livelo_parceiros.xlsx'):
                logger.info("‚ÑπÔ∏è livelo_parceiros.xlsx n√£o encontrado")
                return self._gerar_mudancas_simuladas()
            
            # Carregar dados
            df = pd.read_excel('livelo_parceiros.xlsx')
            df['Timestamp'] = pd.to_datetime(df['Timestamp'])
            
            # Obter dados de hoje e ontem
            datas_unicas = sorted(df['Timestamp'].dt.date.unique(), reverse=True)
            
            if len(datas_unicas) < 2:
                logger.info("‚ÑπÔ∏è Apenas um dia de dados - sem compara√ß√£o")
                return self._gerar_mudancas_simuladas()
            
            data_hoje = datas_unicas[0]
            data_ontem = datas_unicas[1]
            
            df_hoje = df[df['Timestamp'].dt.date == data_hoje].copy()
            df_ontem = df[df['Timestamp'].dt.date == data_ontem].copy()
            
            logger.info(f"üìÖ Comparando {data_hoje} ({len(df_hoje)} registros) vs {data_ontem} ({len(df_ontem)} registros)")
            
            mudancas = []
            
            # Preparar dados para compara√ß√£o (Parceiro + Moeda como chave)
            hoje_dict = {}
            for _, row in df_hoje.iterrows():
                chave = f"{row['Parceiro']}|{row['Moeda']}"
                hoje_dict[chave] = {
                    'parceiro': row['Parceiro'],
                    'moeda': row['Moeda'],
                    'oferta': row['Oferta'] == 'Sim',
                    'pontos': row['Pontos'],
                    'valor': row['Valor'],
                    'pontos_por_moeda': row['Pontos'] / row['Valor'] if row['Valor'] > 0 else 0
                }
            
            ontem_dict = {}
            for _, row in df_ontem.iterrows():
                chave = f"{row['Parceiro']}|{row['Moeda']}"
                ontem_dict[chave] = {
                    'parceiro': row['Parceiro'],
                    'moeda': row['Moeda'],
                    'oferta': row['Oferta'] == 'Sim',
                    'pontos': row['Pontos'],
                    'valor': row['Valor'],
                    'pontos_por_moeda': row['Pontos'] / row['Valor'] if row['Valor'] > 0 else 0
                }
            
            # Detectar mudan√ßas
            for chave in hoje_dict:
                dados_hoje = hoje_dict[chave]
                
                if chave not in ontem_dict:
                    # Novo parceiro
                    mudancas.append({
                        'tipo': 'novo_parceiro',
                        'parceiro': dados_hoje['parceiro'],
                        'moeda': dados_hoje['moeda'],
                        'pontos': dados_hoje['pontos'],
                        'tem_oferta': dados_hoje['oferta'],
                        'timestamp': datetime.now().isoformat()
                    })
                else:
                    dados_ontem = ontem_dict[chave]
                    
                    # Ganhou oferta
                    if dados_hoje['oferta'] and not dados_ontem['oferta']:
                        mudancas.append({
                            'tipo': 'ganhou_oferta',
                            'parceiro': dados_hoje['parceiro'],
                            'moeda': dados_hoje['moeda'],
                            'pontos': dados_hoje['pontos'],
                            'pontos_anterior': dados_ontem['pontos'],
                            'timestamp': datetime.now().isoformat()
                        })
                    
                    # Perdeu oferta
                    elif not dados_hoje['oferta'] and dados_ontem['oferta']:
                        mudancas.append({
                            'tipo': 'perdeu_oferta',
                            'parceiro': dados_hoje['parceiro'],
                            'moeda': dados_hoje['moeda'],
                            'pontos': dados_hoje['pontos'],
                            'pontos_anterior': dados_ontem['pontos'],
                            'timestamp': datetime.now().isoformat()
                        })
                    
                    # Grande mudan√ßa de pontos (>20%)
                    elif dados_ontem['pontos'] > 0:
                        variacao = ((dados_hoje['pontos'] - dados_ontem['pontos']) / dados_ontem['pontos']) * 100
                        
                        if abs(variacao) >= 20:
                            mudancas.append({
                                'tipo': 'grande_mudanca_pontos',
                                'parceiro': dados_hoje['parceiro'],
                                'moeda': dados_hoje['moeda'],
                                'pontos': dados_hoje['pontos'],
                                'pontos_anterior': dados_ontem['pontos'],
                                'variacao_percentual': variacao,
                                'aumento': variacao > 0,
                                'timestamp': datetime.now().isoformat()
                            })
            
            # Parceiros que sumiram
            for chave in ontem_dict:
                if chave not in hoje_dict:
                    dados_ontem = ontem_dict[chave]
                    mudancas.append({
                        'tipo': 'parceiro_sumiu',
                        'parceiro': dados_ontem['parceiro'],
                        'moeda': dados_ontem['moeda'],
                        'pontos_anterior': dados_ontem['pontos'],
                        'tinha_oferta': dados_ontem['oferta'],
                        'timestamp': datetime.now().isoformat()
                    })
            
            self.stats['mudancas_detectadas'] = len(mudancas)
            
            # Log das mudan√ßas encontradas
            tipos_mudanca = {}
            for mudanca in mudancas:
                tipo = mudanca['tipo']
                tipos_mudanca[tipo] = tipos_mudanca.get(tipo, 0) + 1
            
            logger.info(f"üìà {len(mudancas)} mudan√ßas detectadas:")
            for tipo, quantidade in tipos_mudanca.items():
                logger.info(f"   {tipo}: {quantidade}")
            
            return mudancas
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na an√°lise de mudan√ßas: {e}")
            logger.warning(f"Trace: {traceback.format_exc()}")
            return self._gerar_mudancas_simuladas()
    
    def _gerar_mudancas_simuladas(self):
        """Gera mudan√ßas simuladas para teste"""
        mudancas_simuladas = [
            {
                'tipo': 'ganhou_oferta',
                'parceiro': 'Netshoes',
                'moeda': 'R$',
                'pontos': 6.5,
                'pontos_anterior': 4.0,
                'timestamp': datetime.now().isoformat()
            },
            {
                'tipo': 'grande_mudanca_pontos',
                'parceiro': 'Amazon',
                'moeda': 'R$',
                'pontos': 8.0,
                'pontos_anterior': 5.0,
                'variacao_percentual': 60.0,
                'aumento': True,
                'timestamp': datetime.now().isoformat()
            }
        ]
        
        logger.info(f"üé≠ {len(mudancas_simuladas)} mudan√ßas simuladas geradas para teste")
        return mudancas_simuladas
    
    def usuario_interessado_em_mudanca(self, usuario, mudanca):
        """Verifica se usu√°rio est√° interessado nesta mudan√ßa"""
        config = usuario['configuracoes']
        favoritos = usuario['favoritos']
        
        # Chave do parceiro
        chave_parceiro = f"{mudanca['parceiro']}|{mudanca['moeda']}"
        
        # Se apenas favoritos, verificar se est√° nos favoritos
        if config.get('apenas_favoritos', True):
            if chave_parceiro not in favoritos:
                return False
        
        # Verificar tipo de notifica√ß√£o
        tipo = mudanca['tipo']
        
        if tipo == 'ganhou_oferta' or tipo == 'novo_parceiro':
            return config.get('notificar_novas_ofertas', True)
        
        elif tipo == 'perdeu_oferta':
            return config.get('notificar_perdeu_oferta', False)
        
        elif tipo == 'grande_mudanca_pontos':
            return config.get('notificar_grandes_mudancas', False)
        
        return False
    
    def criar_mensagem_notificacao(self, mudanca):
        """Cria t√≠tulo e corpo da notifica√ß√£o baseado na mudan√ßa"""
        tipo = mudanca['tipo']
        parceiro = mudanca['parceiro']
        pontos = mudanca.get('pontos', 0)
        moeda = mudanca['moeda']
        
        if tipo == 'ganhou_oferta':
            titulo = f"üéØ {parceiro} em oferta!"
            corpo = f"{pontos} pontos por {moeda}1 - Aproveite agora!"
            
        elif tipo == 'novo_parceiro':
            status_oferta = "em oferta" if mudanca.get('tem_oferta') else "sem oferta"
            titulo = f"üÜï Novo parceiro: {parceiro}"
            corpo = f"{pontos} pontos por {moeda}1 - {status_oferta}"
            
        elif tipo == 'perdeu_oferta':
            titulo = f"üìâ {parceiro} saiu de oferta"
            corpo = f"Oferta finalizada - agora {pontos} pontos por {moeda}1"
            
        elif tipo == 'grande_mudanca_pontos':
            variacao = mudanca.get('variacao_percentual', 0)
            sinal = "üìà" if mudanca.get('aumento') else "üìâ"
            titulo = f"{sinal} {parceiro} - mudan√ßa de {variacao:.1f}%"
            corpo = f"Agora {pontos} pontos por {moeda}1"
            
        elif tipo == 'parceiro_sumiu':
            titulo = f"üëª {parceiro} sumiu do site"
            corpo = f"Parceiro n√£o encontrado na √∫ltima coleta"
            
        else:
            titulo = f"üîî Atualiza√ß√£o: {parceiro}"
            corpo = f"Mudan√ßa detectada - {pontos} pontos por {moeda}1"
        
        return titulo, corpo
    
    def enviar_notificacao_firebase(self, token, titulo, corpo, dados_extras=None):
        """Envia notifica√ß√£o via Firebase Cloud Messaging"""
        if not self.firebase_configurado or not self.messaging:
            return False
            
        try:
            # Preparar dados extras
            dados = {
                'click_action': 'FCM_PLUGIN_ACTIVITY',
                'sound': 'default',
                'url': 'https://gcaressato.github.io/livelo_scraper/'
            }
            
            if dados_extras:
                dados.update(dados_extras)
            
            # Criar mensagem
            message = self.messaging.Message(
                notification=self.messaging.Notification(
                    title=titulo,
                    body=corpo
                ),
                data=dados,
                token=token,
                
                # Configura√ß√£o Android
                android=self.messaging.AndroidConfig(
                    priority='high',
                    ttl=timedelta(hours=24),
                    notification=self.messaging.AndroidNotification(
                        icon='ic_notification',
                        color='#ff0a8c',
                        sound='default',
                        tag='livelo-offer',
                        click_action='FCM_PLUGIN_ACTIVITY'
                    )
                ),
                
                # Configura√ß√£o Web
                webpush=self.messaging.WebpushConfig(
                    headers={
                        'TTL': '86400'  # 24 horas
                    },
                    notification=self.messaging.WebpushNotification(
                        title=titulo,
                        body=corpo,
                        icon='https://via.placeholder.com/192x192/ff0a8c/ffffff?text=L',
                        badge='https://via.placeholder.com/96x96/ff0a8c/ffffff?text=L',
                        tag='livelo-offer',
                        require_interaction=True,
                        actions=[
                            self.messaging.WebpushNotificationAction(
                                action='view',
                                title='üëÄ Ver Ofertas'
                            ),
                            self.messaging.WebpushNotificationAction(
                                action='dismiss', 
                                title='‚úñÔ∏è Dispensar'
                            )
                        ]
                    ),
                    fcm_options=self.messaging.WebpushFCMOptions(
                        link='https://gcaressato.github.io/livelo_scraper/'
                    )
                )
            )
            
            # Enviar mensagem
            response = self.messaging.send(message)
            logger.debug(f"‚úÖ Notifica√ß√£o enviada: {response}")
            
            self.stats['notificacoes_enviadas'] += 1
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao enviar notifica√ß√£o: {e}")
            self.stats['notificacoes_falharam'] += 1
            return False
    
    def processar_notificacoes(self):
        """Processa e envia todas as notifica√ß√µes necess√°rias"""
        logger.info("üîî Processando notifica√ß√µes...")
        
        # 1. Verificar configura√ß√£o Firebase
        firebase_ok = self.verificar_configuracao_firebase()
        
        if not firebase_ok:
            logger.info("üí° Sistema funcionar√° sem notifica√ß√µes push")
            logger.info("üí° Para ativar notifica√ß√µes:")
            logger.info("   1. Configure FIREBASE_PROJECT_ID")
            logger.info("   2. Configure FIREBASE_SERVICE_ACCOUNT (JSON completo)")
            logger.info("   3. Configure FIREBASE_VAPID_KEY")
            logger.info("   4. Instale: pip install firebase-admin")
            logger.info("   5. Configure user_fcm_tokens.json com usu√°rios")
            return True  # N√£o √© erro cr√≠tico
        
        # 2. Carregar usu√°rios
        usuarios = self.carregar_tokens_usuarios()
        
        if not usuarios:
            logger.info("üì± Nenhum usu√°rio ativo para notificar")
            logger.info("üí° Configure user_fcm_tokens.json com tokens FCM")
            return True
        
        # 3. Analisar mudan√ßas
        mudancas = self.analisar_mudancas_ofertas()
        
        if not mudancas:
            logger.info("üìä Nenhuma mudan√ßa detectada para notificar")
            return True
        
        # 4. Processar notifica√ß√µes para cada usu√°rio
        notificacoes_processadas = 0
        
        for usuario in usuarios:
            usuario_id = usuario['id']
            favoritos_usuario = usuario['favoritos']
            
            logger.debug(f"üë§ Processando usu√°rio {usuario_id} ({len(favoritos_usuario)} favoritos)")
            
            for mudanca in mudancas:
                # Verificar se usu√°rio est√° interessado
                if not self.usuario_interessado_em_mudanca(usuario, mudanca):
                    continue
                
                # Criar mensagem
                titulo, corpo = self.criar_mensagem_notificacao(mudanca)
                
                # Dados extras para a notifica√ß√£o
                dados_extras = {
                    'tipo_mudanca': mudanca['tipo'],
                    'parceiro': mudanca['parceiro'],
                    'moeda': mudanca['moeda'],
                    'pontos': str(mudanca.get('pontos', 0)),
                    'timestamp': mudanca['timestamp']
                }
                
                # Enviar notifica√ß√£o
                sucesso = self.enviar_notificacao_firebase(
                    usuario['token'], 
                    titulo, 
                    corpo, 
                    dados_extras
                )
                
                if sucesso:
                    notificacoes_processadas += 1
                    logger.debug(f"üì§ {usuario_id}: {titulo}")
                else:
                    logger.warning(f"‚ùå Falha ao notificar {usuario_id}: {titulo}")
            
            self.stats['favoritos_processados'] += len(favoritos_usuario)
        
        logger.info(f"üìä {notificacoes_processadas} notifica√ß√µes processadas")
        return True
    
    def gerar_relatorio_final(self):
        """Gera relat√≥rio final das notifica√ß√µes"""
        print("\n" + "="*50)
        print("üîî SISTEMA DE NOTIFICA√á√ïES LIVELO")
        print("="*50)
        print(f"‚è∞ Executado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üî• Firebase: {'‚úÖ Configurado' if self.firebase_configurado else '‚ùå N√£o configurado'}")
        print("")
        print("üìä ESTAT√çSTICAS:")
        print(f"   üë• Usu√°rios ativos: {self.stats['usuarios_ativos']}")
        print(f"   üìà Mudan√ßas detectadas: {self.stats['mudancas_detectadas']}")
        print(f"   ‚≠ê Favoritos processados: {self.stats['favoritos_processados']}")
        print(f"   ‚úÖ Notifica√ß√µes enviadas: {self.stats['notificacoes_enviadas']}")
        print(f"   ‚ùå Notifica√ß√µes falharam: {self.stats['notificacoes_falharam']}")
        print("")
        
        if self.firebase_configurado:
            if self.stats['notificacoes_enviadas'] > 0:
                print("üéâ NOTIFICA√á√ïES ENVIADAS COM SUCESSO!")
                taxa_sucesso = (self.stats['notificacoes_enviadas'] / 
                               (self.stats['notificacoes_enviadas'] + self.stats['notificacoes_falharam']) * 100)
                print(f"üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
            else:
                print("‚ÑπÔ∏è NENHUMA NOTIFICA√á√ÉO ENVIADA")
                print("üí° Verifique se h√° mudan√ßas e usu√°rios interessados")
        else:
            print("üí° PARA ATIVAR NOTIFICA√á√ïES:")
            print("   1. Configure secrets do Firebase no GitHub")
            print("   2. Adicione usu√°rios em user_fcm_tokens.json")
            print("   3. Instale firebase-admin: pip install firebase-admin")
        
        print("")
        print("‚ÑπÔ∏è Sistema principal funciona independentemente das notifica√ß√µes")
        print("="*50)
    
    def executar(self):
        """Executa sistema completo de notifica√ß√µes"""
        try:
            logger.info("üöÄ Iniciando sistema de notifica√ß√µes Livelo...")
            
            sucesso = self.processar_notificacoes()
            
            if sucesso:
                logger.info("‚úÖ Sistema de notifica√ß√µes processado com sucesso")
            else:
                logger.warning("‚ö†Ô∏è Sistema de notifica√ß√µes com problemas")
            
            self.gerar_relatorio_final()
            return sucesso
            
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado no sistema de notifica√ß√µes: {e}")
            logger.error(f"Trace: {traceback.format_exc()}")
            
            # Relat√≥rio mesmo com erro
            print(f"\n‚ö†Ô∏è Sistema de notifica√ß√µes teve problemas: {e}")
            print("‚ÑπÔ∏è Sistema principal n√£o foi afetado")
            
            # N√£o quebrar sistema principal
            return True

def main():
    """Fun√ß√£o principal - sempre retorna sucesso para n√£o quebrar pipeline"""
    try:
        sender = LiveloNotificationSender()
        sender.executar()
        
        # Sempre retornar sucesso (c√≥digo 0) para n√£o quebrar pipeline
        sys.exit(0)
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro cr√≠tico nas notifica√ß√µes: {e}")
        print("‚ÑπÔ∏è Sistema principal n√£o foi afetado")
        
        # Mesmo com erro cr√≠tico, retornar sucesso para n√£o quebrar pipeline
        sys.exit(0)

if __name__ == "__main__":
    main()
