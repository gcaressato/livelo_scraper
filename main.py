#!/usr/bin/env python3
"""
Main.py - Orquestrador do Sistema Livelo Analytics
Gerencia todo o pipeline: Scraping ‚Üí An√°lise ‚Üí Deploy ‚Üí Notifica√ß√µes
Vers√£o corrigida com melhor relat√≥rios no console e valida√ß√£o aprimorada
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('main_livelo.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LiveloOrchestrator:
    def __init__(self):
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.sucesso_etapas = {
            'scraping': False,
            'analise': False,
            'validacao': False,
            'deploy_github': False,
            'notificacoes': False
        }
        
    def validar_arquivos_gerados(self):
        """Valida se os arquivos foram gerados corretamente"""
        logger.info("üîç Validando arquivos gerados...")
        
        arquivos_criticos = [
            'relatorio_livelo.html',
            'livelo_parceiros.xlsx'
        ]
        
        for arquivo in arquivos_criticos:
            if not os.path.exists(arquivo):
                logger.error(f"‚ùå Arquivo cr√≠tico n√£o encontrado: {arquivo}")
                return False
            
            # Verificar tamanho m√≠nimo
            size = os.path.getsize(arquivo)
            if arquivo.endswith('.html') and size < 50000:  # HTML deve ter pelo menos 50KB
                logger.error(f"‚ùå HTML muito pequeno: {arquivo} ({size:,} bytes)")
                return False
            elif arquivo.endswith('.xlsx') and size < 1000:  # Excel deve ter pelo menos 1KB
                logger.error(f"‚ùå Excel muito pequeno: {arquivo} ({size:,} bytes)")
                return False
            
            logger.info(f"‚úÖ {arquivo}: {size:,} bytes")
        
        # Verificar conte√∫do HTML espec√≠fico
        if os.path.exists('relatorio_livelo.html'):
            with open('relatorio_livelo.html', 'r', encoding='utf-8') as f:
                conteudo = f.read()
                
                # Verifica√ß√µes cr√≠ticas
                if 'Livelo Analytics Pro' not in conteudo:
                    logger.error("‚ùå HTML n√£o cont√©m t√≠tulo esperado")
                    return False
                    
                if len(conteudo) < 100000:  # HTML deve ser substancial
                    logger.warning(f"‚ö†Ô∏è HTML pode estar incompleto: {len(conteudo):,} chars")
                    
                if 'toggleFavorito' not in conteudo:
                    logger.warning("‚ö†Ô∏è Sistema de favoritos n√£o detectado no HTML")
                    
                if '</html>' not in conteudo:
                    logger.error("‚ùå HTML malformado - tag de fechamento ausente")
                    return False
                    
                logger.info("‚úÖ Conte√∫do HTML validado")
        
        # Preparar diret√≥rio public para deploy
        if not os.path.exists('public'):
            os.makedirs('public')
            logger.info("‚úÖ Diret√≥rio public criado")
            
        self.sucesso_etapas['validacao'] = True
        return True
        
    def executar_scraping(self):
        """Executa o scraping do site Livelo"""
        logger.info("üï∑Ô∏è Iniciando scraping...")
        
        try:
            # Verificar se o scraper existe
            if not os.path.exists('livelo_scraper.py'):
                logger.warning("‚ö†Ô∏è livelo_scraper.py n√£o encontrado - pulando scraping")
                return True  # Assume que dados j√° existem
            
            # Executar scraper
            resultado = subprocess.run([
                sys.executable, 'livelo_scraper.py'
            ], capture_output=True, text=True, timeout=1800)  # 30 min timeout
            
            if resultado.returncode == 0:
                logger.info("‚úÖ Scraping conclu√≠do com sucesso")
                self.sucesso_etapas['scraping'] = True
                return True
            else:
                logger.error(f"‚ùå Falha no scraping: {resultado.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout no scraping (30 minutos)")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro no scraping: {e}")
            return False
    
    def executar_analise(self):
        """Executa a an√°lise e gera√ß√£o do relat√≥rio"""
        logger.info("üìä Iniciando an√°lise...")
        
        try:
            # Verificar se o arquivo de dados existe
            if not os.path.exists('livelo_parceiros.xlsx'):
                logger.error("‚ùå livelo_parceiros.xlsx n√£o encontrado")
                return False
            
            # Executar an√°lise com reporter
            resultado = subprocess.run([
                sys.executable, 'livelo_reporter.py', 'livelo_parceiros.xlsx'
            ], capture_output=True, text=True, timeout=600)  # 10 min timeout
            
            if resultado.returncode == 0:
                logger.info("‚úÖ An√°lise conclu√≠da com sucesso")
                self.sucesso_etapas['analise'] = True
                
                # Verificar se os arquivos foram gerados
                arquivos_esperados = ['relatorio_livelo.html']
                for arquivo in arquivos_esperados:
                    if os.path.exists(arquivo):
                        size = os.path.getsize(arquivo)
                        logger.info(f"üìÑ {arquivo}: {size:,} bytes")
                    else:
                        logger.warning(f"‚ö†Ô∏è {arquivo} n√£o foi gerado")
                
                # Executar valida√ß√£o imediatamente ap√≥s an√°lise
                if not self.validar_arquivos_gerados():
                    logger.error("‚ùå Falha na valida√ß√£o dos arquivos")
                    return False
                
                return True
            else:
                logger.error(f"‚ùå Falha na an√°lise: {resultado.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå Timeout na an√°lise (10 minutos)")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise: {e}")
            return False
    
    def deploy_github_pages(self):
        """Deploy para GitHub Pages (se estiver em GitHub Actions)"""
        logger.info("üöÄ Verificando deploy GitHub Pages...")
        
        try:
            # Se estiver rodando em GitHub Actions
            if os.getenv('GITHUB_ACTIONS'):
                logger.info("üîÑ Deploy ser√° feito pelo GitHub Actions workflow")
                self.sucesso_etapas['deploy_github'] = True
                return True
            else:
                # Rodando localmente - fazer commit se necess√°rio
                if os.path.exists('.git'):
                    logger.info("üìÅ Reposit√≥rio Git detectado - fazendo commit dos arquivos")
                    
                    # Adicionar arquivos
                    subprocess.run(['git', 'add', 'relatorio_livelo.html'], 
                                 capture_output=True, text=True)
                    subprocess.run(['git', 'add', 'livelo_parceiros.xlsx'], 
                                 capture_output=True, text=True)
                    
                    # Commit
                    commit_msg = f"Atualiza√ß√£o autom√°tica - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
                    resultado = subprocess.run([
                        'git', 'commit', '-m', commit_msg
                    ], capture_output=True, text=True)
                    
                    if resultado.returncode == 0:
                        logger.info("‚úÖ Commit realizado com sucesso")
                        self.sucesso_etapas['deploy_github'] = True
                        return True
                    else:
                        logger.info("‚ÑπÔ∏è Nenhuma mudan√ßa para commit")
                        self.sucesso_etapas['deploy_github'] = True
                        return True
                else:
                    logger.info("‚ÑπÔ∏è N√£o √© um reposit√≥rio Git - deploy manual")
                    self.sucesso_etapas['deploy_github'] = True
                    return True
                    
        except Exception as e:
            logger.error(f"‚ùå Erro no deploy: {e}")
            return False
    
    def executar_notificacoes(self):
        """Executa o sistema de notifica√ß√µes"""
        logger.info("üîî Iniciando notifica√ß√µes...")
        
        try:
            # Verificar se as vari√°veis de ambiente est√£o configuradas
            firebase_project = os.getenv('FIREBASE_PROJECT_ID')
            firebase_service_account = os.getenv('FIREBASE_SERVICE_ACCOUNT')
            
            if not firebase_project:
                logger.warning("‚ö†Ô∏è FIREBASE_PROJECT_ID n√£o configurado")
                logger.info("üí° Configure as vari√°veis de ambiente:")
                logger.info("   - FIREBASE_PROJECT_ID")
                logger.info("   - FIREBASE_SERVICE_ACCOUNT")
                logger.warning("üîî Notifica√ß√µes ser√£o simuladas (n√£o enviadas)")
                # N√£o √© erro cr√≠tico - sistema pode funcionar sem notifica√ß√µes
                self.sucesso_etapas['notificacoes'] = True
                return True
            
            # Executar sistema de notifica√ß√µes
            resultado = subprocess.run([
                sys.executable, 'notification_sender.py'
            ], capture_output=True, text=True, timeout=300)  # 5 min timeout
            
            if resultado.returncode == 0:
                logger.info("‚úÖ Notifica√ß√µes processadas com sucesso")
                self.sucesso_etapas['notificacoes'] = True
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Notifica√ß√µes com problemas: {resultado.stderr}")
                # Notifica√ß√µes n√£o s√£o cr√≠ticas para o sistema principal
                self.sucesso_etapas['notificacoes'] = True
                return True
                
        except subprocess.TimeoutExpired:
            logger.warning("‚ö†Ô∏è Timeout nas notifica√ß√µes (5 minutos)")
            self.sucesso_etapas['notificacoes'] = True
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nas notifica√ß√µes: {e}")
            self.sucesso_etapas['notificacoes'] = True
            return True
    
    def gerar_relatorio_execucao(self):
        """Gera relat√≥rio final da execu√ß√£o no console"""
        logger.info("üìã Gerando relat√≥rio de execu√ß√£o...")
        
        total_etapas = len(self.sucesso_etapas)
        etapas_sucesso = sum(self.sucesso_etapas.values())
        
        print("\n" + "="*60)
        print("üìä RELAT√ìRIO DE EXECU√á√ÉO LIVELO ANALYTICS")
        print("="*60)
        print(f"‚è∞ Timestamp: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"‚úÖ Sucesso: {etapas_sucesso}/{total_etapas} etapas")
        print("")
        print("üîç DETALHES DAS ETAPAS:")
        print(f"   üï∑Ô∏è Scraping: {'‚úÖ SUCESSO' if self.sucesso_etapas['scraping'] else '‚ùå FALHA'}")
        print(f"   üìä An√°lise: {'‚úÖ SUCESSO' if self.sucesso_etapas['analise'] else '‚ùå FALHA'}")
        print(f"   üîç Valida√ß√£o: {'‚úÖ SUCESSO' if self.sucesso_etapas['validacao'] else '‚ùå FALHA'}")
        print(f"   üöÄ Deploy GitHub: {'‚úÖ SUCESSO' if self.sucesso_etapas['deploy_github'] else '‚ùå FALHA'}")
        print(f"   üîî Notifica√ß√µes: {'‚úÖ SUCESSO' if self.sucesso_etapas['notificacoes'] else '‚ùå FALHA'}")
        print("")
        print("üìÅ ARQUIVOS GERADOS:")
        
        # Verificar arquivos gerados
        arquivos_verificar = [
            'relatorio_livelo.html',
            'livelo_parceiros.xlsx',
            'user_fcm_tokens.json',
            'firebase.json',
            'main_livelo.log'
        ]
        
        for arquivo in arquivos_verificar:
            if os.path.exists(arquivo):
                size = os.path.getsize(arquivo)
                print(f"   üìÑ {arquivo}: {size:,} bytes")
            else:
                print(f"   ‚ùå {arquivo}: N√ÉO ENCONTRADO")
        
        # Verificar diret√≥rio public
        if os.path.exists('public'):
            public_files = os.listdir('public')
            if public_files:
                print(f"   üìÅ public/: {len(public_files)} arquivos prontos para deploy")
            else:
                print("   üìÅ public/: vazio")
        
        # Verificar logs adicionais
        logs_gerados = [f for f in os.listdir('.') if f.endswith('.log')]
        if logs_gerados:
            print(f"   üìù Logs adicionais: {', '.join(logs_gerados)}")
        
        # Status final
        print("")
        if etapas_sucesso >= 3:  # Pelo menos scraping/an√°lise + valida√ß√£o + deploy
            print("üéâ EXECU√á√ÉO BEM-SUCEDIDA!")
            print("üåê Site dispon√≠vel em: https://gcaressato.github.io/livelo_scraper/")
            if os.path.exists('firebase.json'):
                print("üî• Firebase dispon√≠vel em: https://livel-analytics.web.app/")
            status_final = True
        else:
            print("‚ùå EXECU√á√ÉO COM FALHAS CR√çTICAS!")
            print("üîß Verifique os logs acima para identificar problemas")
            print("üí° Execute: python fix_system.py para diagn√≥stico autom√°tico")
            status_final = False
        
        print("="*60)
        
        return status_final
    
    def executar_pipeline_completo(self, pular_scraping=False, apenas_analise=False):
        """Executa todo o pipeline"""
        print("\nüöÄ INICIANDO PIPELINE LIVELO ANALYTICS")
        print("="*50)
        print(f"‚è∞ Timestamp: {self.timestamp}")
        print(f"üìÅ Diret√≥rio: {os.getcwd()}")
        print(f"üêç Python: {sys.version.split()[0]}")
        print("="*50)
        
        try:
            # 1. SCRAPING (opcional)
            if not pular_scraping and not apenas_analise:
                if not self.executar_scraping():
                    logger.error("‚ùå Falha cr√≠tica no scraping")
                    return False
            else:
                logger.info("‚è≠Ô∏è Pulando scraping")
                self.sucesso_etapas['scraping'] = True
            
            # 2. AN√ÅLISE + VALIDA√á√ÉO (obrigat√≥rio)
            if not self.executar_analise():
                logger.error("‚ùå Falha cr√≠tica na an√°lise")
                return False
            
            # 3. DEPLOY (se n√£o for apenas an√°lise)
            if not apenas_analise:
                if not self.deploy_github_pages():
                    logger.warning("‚ö†Ô∏è Problemas no deploy - continuando...")
            else:
                logger.info("‚è≠Ô∏è Pulando deploy")
                self.sucesso_etapas['deploy_github'] = True
            
            # 4. NOTIFICA√á√ïES (se n√£o for apenas an√°lise)
            if not apenas_analise:
                if not self.executar_notificacoes():
                    logger.warning("‚ö†Ô∏è Problemas nas notifica√ß√µes - continuando...")
            else:
                logger.info("‚è≠Ô∏è Pulando notifica√ß√µes")
                self.sucesso_etapas['notificacoes'] = True
            
            # 5. RELAT√ìRIO FINAL
            return self.gerar_relatorio_execucao()
            
        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description='Livelo Analytics - Sistema Completo')
    parser.add_argument('--pular-scraping', action='store_true', 
                       help='Pular etapa de scraping (usar dados existentes)')
    parser.add_argument('--apenas-analise', action='store_true',
                       help='Executar apenas an√°lise e relat√≥rio')
    parser.add_argument('--apenas-notificacoes', action='store_true',
                       help='Executar apenas sistema de notifica√ß√µes')
    
    args = parser.parse_args()
    
    orchestrator = LiveloOrchestrator()
    
    # Modo especial: apenas notifica√ß√µes
    if args.apenas_notificacoes:
        logger.info("üîî Modo: Apenas Notifica√ß√µes")
        sucesso = orchestrator.executar_notificacoes()
        sys.exit(0 if sucesso else 1)
    
    # Pipeline completo
    sucesso = orchestrator.executar_pipeline_completo(
        pular_scraping=args.pular_scraping,
        apenas_analise=args.apenas_analise
    )
    
    sys.exit(0 if sucesso else 1)

if __name__ == "__main__":
    main()
