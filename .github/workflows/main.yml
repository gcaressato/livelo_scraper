name: Livelo Analytics | Firebase Integrado
on:
  schedule:
    - cron: '0 10 * * *'  # 7h Brasil = 10h UTC
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # JOB 1: PIPELINE PRINCIPAL (Scraping + Análise + GitHub Pages)
  pipeline_principal:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      pipeline_success: ${{ steps.validation.outputs.success }}
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar dependências principais
        run: |
          pip install selenium webdriver-manager pandas openpyxl selenium-stealth plotly numpy requests
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          google-chrome --version
          
      - name: Criar diretórios necessários
        run: |
          mkdir -p logs
          mkdir -p public
          
      - name: Executar pipeline principal (main.py)
        run: |
          echo "🚀 Iniciando pipeline Livelo Analytics..."
          python main.py 2>&1 | tee pipeline.log
          echo "PIPELINE_STATUS=$?" >> $GITHUB_ENV
        continue-on-error: true
          
      - name: Validação rigorosa dos resultados
        id: validation
        run: |
          echo "📊 Validando resultados do pipeline..."
          
          if [ "$PIPELINE_STATUS" = "0" ]; then
            echo "✅ Pipeline executado com sucesso"
            echo "PIPELINE_OK=true" >> $GITHUB_ENV
          else
            echo "❌ Pipeline falhou - saindo imediatamente"
            echo "PIPELINE_OK=false" >> $GITHUB_ENV
            exit 1
          fi
          
          # Verificar arquivos críticos
          if [ -f "public/index.html" ] && [ -f "livelo_parceiros.xlsx" ]; then
            echo "✅ Arquivos principais encontrados"
            ls -la public/index.html *.xlsx
            echo "FILES_OK=true" >> $GITHUB_ENV
          else
            echo "❌ Arquivos principais ausentes"
            echo "FILES_OK=false" >> $GITHUB_ENV
            exit 1
          fi
          
          # Verificar tamanho do HTML
          if [ -f "public/index.html" ]; then
            size=$(stat -f%z "public/index.html" 2>/dev/null || stat -c%s "public/index.html" 2>/dev/null || echo "0")
            if [ "$size" -gt 50000 ]; then
              echo "✅ HTML válido: $size bytes"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "❌ HTML muito pequeno: $size bytes"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        
      - name: Upload páginas como artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
          
      - name: Configurar Git e fazer commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          timestamp=$(date +"%d/%m/%Y %H:%M")
          
          git add -f public/index.html
          git add -f livelo_parceiros.xlsx
          git add -f *.log 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "ℹ️ Nenhuma mudança detectada para commit"
          else
            echo "📝 Fazendo commit das mudanças..."
            
            git commit -m "📊 Atualização Livelo Analytics - $timestamp

            ✅ Pipeline: Sucesso com validação rigorosa
            📄 Arquivos: Validados (min 50 parceiros)
            📁 Preparado para GitHub Pages
            🔥 Firebase: Será processado no próximo job
            ⏰ Executado: $timestamp"
            
            # Push com retry
            for i in {1..3}; do
              if git push; then
                echo "✅ Push realizado com sucesso (tentativa $i)"
                break
              else
                echo "⚠️ Falha no push (tentativa $i)"
                sleep 5
                if [ $i -eq 3 ]; then
                  echo "❌ Push falhou após 3 tentativas"
                  exit 1
                fi
              fi
            done
          fi

  # JOB 2: DEPLOY GITHUB PAGES
  deploy_github_pages:
    needs: pipeline_principal
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: needs.pipeline_principal.outputs.pipeline_success == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy para GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # JOB 3: FIREBASE INTEGRATION
  firebase_integration:
    needs: [pipeline_principal, deploy_github_pages]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always() && needs.pipeline_principal.outputs.pipeline_success == 'true'
    
    steps:
      - name: Checkout para Firebase
        uses: actions/checkout@v4
        
      - name: Setup Node.js para Firebase
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          # REMOVIDO: cache: 'npm'
          
      - name: Setup Python para notificações
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Instalar dependências Firebase
        run: |
          # Verificar se package.json existe antes de instalar
          if [ -f "package.json" ]; then
            echo "📦 Instalando dependências do package.json..."
            npm install
          else
            echo "📦 package.json não encontrado, criando dependências mínimas..."
            npm init -y
            npm install firebase@^9.0.0
          fi
          
          # Instalar Firebase CLI globalmente
          npm install -g firebase-tools
          
          # Instalar dependências Python
          pip install firebase-admin pandas openpyxl
          
      - name: Verificar configuração Firebase
        run: |
          echo "🔍 Verificando configuração Firebase..."
          
          if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "✅ FIREBASE_PROJECT_ID configurado"
            echo "FIREBASE_CONFIGURED=true" >> $GITHUB_ENV
          else
            echo "ℹ️ FIREBASE_PROJECT_ID não configurado"
            echo "FIREBASE_CONFIGURED=false" >> $GITHUB_ENV
          fi
          
          if [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "✅ FIREBASE_SERVICE_ACCOUNT configurado"
          else
            echo "ℹ️ FIREBASE_SERVICE_ACCOUNT não configurado"
            echo "FIREBASE_CONFIGURED=false" >> $GITHUB_ENV
          fi
          
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "✅ FIREBASE_TOKEN configurado"
          else
            echo "ℹ️ FIREBASE_TOKEN não configurado"
          fi
          
      - name: Criar estrutura Firebase mínima
        if: env.FIREBASE_CONFIGURED == 'true'
        run: |
          echo "🔧 Criando estrutura Firebase..."
          
          # Criar firebase.json se não existir
          if [ ! -f "firebase.json" ]; then
            echo "📝 Criando firebase.json..."
            cat > firebase.json << 'EOF'
          {
            "hosting": {
              "public": "public",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ]
            }
          }
          EOF
          fi
          
          # Criar diretório public
          mkdir -p public
          
          # Criar .firebaserc se não existir
          if [ ! -f ".firebaserc" ]; then
            echo "📝 Criando .firebaserc..."
            cat > .firebaserc << EOF
          {
            "projects": {
              "default": "${{ secrets.FIREBASE_PROJECT_ID }}"
            }
          }
          EOF
          fi
          
      - name: Criar configuração Firebase dinâmica
        if: env.FIREBASE_CONFIGURED == 'true'
        run: |
          echo "🔧 Criando configuração Firebase dinâmica..."
          
          # Criar pasta sender se não existir
          mkdir -p sender
          
          # Criar firebase-config.js com valores reais
          cat > sender/firebase-config.js << 'EOF'
          import { initializeApp } from 'firebase/app';
          import { getMessaging } from 'firebase/messaging';
          import { getFirestore } from 'firebase/firestore';

          const firebaseConfig = {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          };

          const app = initializeApp(firebaseConfig);
          const messaging = getMessaging(app);
          const db = getFirestore(app);

          export { messaging, db };
          EOF
          
          # Criar Service Worker com valores reais
          cat > public/firebase-messaging-sw.js << 'EOF'
          importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
          importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

          const firebaseConfig = {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          };

          firebase.initializeApp(firebaseConfig);
          const messaging = firebase.messaging();

          messaging.onBackgroundMessage((payload) => {
            const notificationTitle = payload.notification?.title || 'Livelo Analytics';
            const notificationOptions = {
              body: payload.notification?.body || 'Novas atualizações disponíveis',
              icon: '/icon-192.png',
              tag: 'livelo-update'
            };
            self.registration.showNotification(notificationTitle, notificationOptions);
          });

          self.addEventListener('notificationclick', (event) => {
            event.notification.close();
            if (event.action === 'view') {
              event.waitUntil(clients.openWindow('https://gcaressato.github.io/livelo_scraper/'));
            }
          });
          EOF
          
          echo "✅ Configuração Firebase dinâmica criada"
          
      - name: Sincronizar arquivos do pipeline
        run: |
          echo "📥 Sincronizando arquivos do pipeline..."
          
          # Pull das mudanças do job anterior
          git pull origin main || echo "Nenhuma mudança para sincronizar"
          
          if [ -f "public/index.html" ] && [ -f "livelo_parceiros.xlsx" ]; then
            echo "✅ Arquivos encontrados"
            ls -la public/index.html *.xlsx
          else
            echo "❌ Arquivos não encontrados após sincronização"
            echo "📁 Arquivos disponíveis:"
            ls -la
            exit 1
          fi
          
      - name: Deploy Firebase Hosting
        if: env.FIREBASE_CONFIGURED == 'true'
        run: |
          echo "🚀 Fazendo deploy Firebase..."
          
          # Usar token Firebase CLI se disponível
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "🔑 Usando FIREBASE_TOKEN"
            firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}" --project "${{ secrets.FIREBASE_PROJECT_ID }}" --non-interactive
          else
            echo "⚠️ FIREBASE_TOKEN não encontrado"
            echo "ℹ️ Configure FIREBASE_TOKEN nos secrets para deploy automático"
            exit 0
          fi
          
          echo "✅ Deploy Firebase concluído"
          echo "🌐 URL: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/"
        continue-on-error: true
        
      - name: Executar notificações
        if: env.FIREBASE_CONFIGURED == 'true'
        run: |
          echo "📱 Executando notificações..."
          
          if [ -f "notification_sender.py" ]; then
            timeout 300 python notification_sender.py || echo "Notificações concluídas"
          else
            echo "notification_sender.py não encontrado"
          fi
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_VAPID_KEY: ${{ secrets.FIREBASE_VAPID_KEY }}
        continue-on-error: true
        
      - name: Limpar arquivos temporários
        if: always()
        run: |
          rm -f firebase-service-account.json 2>/dev/null || true
          rm -f firebase_config_inject.js 2>/dev/null || true
          echo "🧹 Arquivos temporários removidos"

  # JOB 4: RESUMO FINAL
  summary:
    needs: [pipeline_principal, deploy_github_pages, firebase_integration]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: Resumo final da execução
        run: |
          echo ""
          echo "🎉 RESUMO DA EXECUÇÃO LIVELO ANALYTICS"
          echo "====================================="
          echo "⏰ Concluído: $(date +'%d/%m/%Y %H:%M:%S')"
          echo ""
          echo "📊 STATUS DOS JOBS:"
          echo "├─ Pipeline Principal: ${{ needs.pipeline_principal.result == 'success' && '✅ SUCESSO' || '❌ FALHOU' }}"
          echo "├─ GitHub Pages: ${{ needs.deploy_github_pages.result == 'success' && '✅ SUCESSO' || '❌ FALHOU' }}"
          echo "└─ Firebase: ${{ needs.firebase_integration.result == 'success' && '✅ SUCESSO' || '⚪ OPCIONAL' }}"
          echo ""
          
          if [ "${{ needs.pipeline_principal.result }}" = "success" ]; then
            echo "🌐 SISTEMA ONLINE:"
            echo "├─ GitHub Pages: https://gcaressato.github.io/livelo_scraper/"
            
            if [ "${{ needs.firebase_integration.result }}" = "success" ]; then
              echo "├─ Firebase Hosting: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/"
              echo "└─ Notificações Push: ✅ Ativas"
            else
              echo "└─ Firebase: ⚪ Não configurado (opcional)"
            fi
            
            echo ""
            echo "🎯 FUNCIONALIDADES ATIVAS:"
            echo "├─ ✅ Scraping automático"
            echo "├─ ✅ Análises e relatórios"
            echo "├─ ✅ Sistema de favoritos"
            echo "├─ ✅ Deploy automático"
            
            if [ "${{ needs.firebase_integration.result }}" = "success" ]; then
              echo "└─ ✅ Notificações push"
            else
              echo "└─ ⚪ Notificações push (desabilitadas)"
            fi
            
            echo ""
            echo "✅ SISTEMA FUNCIONANDO NORMALMENTE!"
            echo "::notice::Livelo Analytics online - Todos os dados atualizados"
          else
            echo "❌ FALHA NO PIPELINE PRINCIPAL!"
            echo ""
            echo "🚨 AÇÕES NECESSÁRIAS:"
            echo "├─ Verificar logs detalhados do job 'pipeline_principal'"
            echo "├─ Analisar possíveis mudanças no site da Livelo"
            echo "├─ Verificar conectividade e dependências"
            echo "└─ Corrigir problemas antes da próxima execução"
            echo ""
            echo "::error::Sistema principal falhou - Verificar logs para diagnóstico"
          fi
