name: Livelo Partners Scraper
on:
  schedule:
    - cron: '0 12 * * *'  # Executa todos os dias às 12:00 UTC
  workflow_dispatch:  # Permite execução manual
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar dependências
        run: |
          pip install selenium webdriver-manager pandas openpyxl selenium-stealth plotly numpy
          # Verificar versão do Selenium e Chrome
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          google-chrome --version
          
      - name: Verificar ambiente
        run: |
          echo "Diretório atual: $(pwd)"
          echo "Conteúdo do diretório: $(ls -la)"
          
      - name: Criar diretórios para logs e saída
        run: |
          mkdir -p logs
          mkdir -p relatorios
          
      - name: Executar scraper diretamente (para depuração)
        run: |
          python livelo_scraper.py 2>&1 | tee scraper_debug.log
        continue-on-error: true
          
      - name: Executar script principal
        run: |
          python main.py 2>&1 | tee output.log
        continue-on-error: true
        
      - name: Verificar falhas na execução
        run: |
          if cat output.log | grep -q "Falha no scraper\|Falha no reporter\|ERRO FATAL"; then
            echo "::warning::Falhas detectadas na execução!"
            grep -A 10 "Falha\|ERRO" output.log || true
            echo "SCRAPING_FALHOU=true" >> $GITHUB_ENV
          else
            echo "Nenhuma falha detectada na execução."
          fi
      
      - name: Listar arquivos de diagnóstico
        run: |
          echo "Arquivos HTML gerados:"
          ls -la *.html || echo "Nenhum arquivo HTML encontrado"
          echo "Arquivos de log gerados:"
          ls -la *.log || echo "Nenhum arquivo de log encontrado"
          echo "Screenshots gerados:"
          ls -la *.png || echo "Nenhum screenshot encontrado"
      
      - name: Configurar Git para commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
      - name: Commit e push dos novos dados
        run: |
          # Copiar logs
          if [ -f "output.log" ]; then
            cp output.log logs/scraper_$(date +%Y%m%d_%H%M%S).log
          fi
          
          # Adicionar arquivos de diagnóstico individualmente para evitar problemas
          for file in debug_*.html debug_*.png debug_*.txt *.log; do
            if [ -f "$file" ]; then
              git add -f "$file" || echo "Não foi possível adicionar $file"
            fi
          done
          
          # Adicionar diretórios
          if [ -d "logs" ]; then
            git add logs/ || echo "Não foi possível adicionar logs/"
          fi
          
          if [ -d "relatorios" ]; then
            git add relatorios/ || echo "Não foi possível adicionar relatorios/"
          fi
          
          # Adicionar o arquivo Excel se existir
          if [ -f "livelo_parceiros.xlsx" ]; then
            git add livelo_parceiros.xlsx || echo "Não foi possível adicionar livelo_parceiros.xlsx"
          fi
          
          # Adicionar o relatório HTML se existir
          if [ -f "relatorio_livelo.html" ]; then
            git add relatorio_livelo.html || echo "Não foi possível adicionar relatorio_livelo.html"
          fi
          
          # Tentar commit com verificação se há algo para comitar
          git diff --staged --quiet || git commit -m "Atualização automática [$(date)]"
          
          # Push com tratamento de erro
          git push || echo "Falha ao fazer push, verifique os logs para mais detalhes"
      
      # Configurar e publicar no GitHub Pages
      - name: Configurar diretório de publicação
        run: |
          mkdir -p ./public
          # Copiar o arquivo HTML principal para o diretório de publicação
          cp relatorio_livelo.html ./public/index.html || echo "Relatório HTML não encontrado"
          # Copiar outros arquivos necessários (CSS, JS, imagens)
          cp -r *.css *.js ./public/ 2>/dev/null || echo "Nenhum arquivo CSS/JS encontrado"
          if [ -d "relatorios" ]; then
            cp -r relatorios/* ./public/ 2>/dev/null || echo "Nenhum arquivo encontrado em relatórios"
          fi
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Deploy para GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: public
          branch: gh-pages
          clean: true # Remove arquivos antigos
