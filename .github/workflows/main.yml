name: Livelo Partners Scraper
on:
  schedule:
    - cron: '0 12 * * *'  # Executa todos os dias √†s 12:00 UTC
  workflow_dispatch:  # Permite execu√ß√£o manual

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Timeout de 45 minutos
    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar depend√™ncias
        run: |
          pip install selenium webdriver-manager pandas openpyxl selenium-stealth plotly numpy requests
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          google-chrome --version
          
      - name: Criar diret√≥rios necess√°rios
        run: |
          mkdir -p logs
          mkdir -p relatorios
          
      - name: Executar pipeline principal
        run: |
          echo "üöÄ Iniciando pipeline Livelo Analytics..."
          python main.py 2>&1 | tee pipeline.log
          echo "PIPELINE_STATUS=$?" >> $GITHUB_ENV
        continue-on-error: true
          
      - name: Verificar resultados do pipeline
        run: |
          echo "üìä Verificando resultados do pipeline..."
          
          if [ "$PIPELINE_STATUS" = "0" ]; then
            echo "‚úÖ Pipeline executado com sucesso"
            echo "PIPELINE_OK=true" >> $GITHUB_ENV
          else
            echo "‚ùå Pipeline com problemas"
            echo "PIPELINE_OK=false" >> $GITHUB_ENV
            # FALHA EXPL√çCITA - main.py j√° fez todas as valida√ß√µes
            exit 1
          fi
          
          # Verificar arquivos cr√≠ticos
          if [ -f "relatorio_livelo.html" ] && [ -f "livelo_parceiros.xlsx" ]; then
            echo "‚úÖ Arquivos principais encontrados"
            ls -la *.html *.xlsx
            echo "FILES_OK=true" >> $GITHUB_ENV
          else
            echo "‚ùå Arquivos principais ausentes"
            echo "FILES_OK=false" >> $GITHUB_ENV
            exit 1
          fi
          
          # Verificar tamanho do HTML (verifica√ß√£o r√°pida adicional)
          if [ -f "relatorio_livelo.html" ]; then
            size=$(stat -f%z "relatorio_livelo.html" 2>/dev/null || stat -c%s "relatorio_livelo.html" 2>/dev/null || echo "0")
            if [ "$size" -gt 50000 ]; then
              echo "‚úÖ HTML v√°lido: $size bytes"
            else
              echo "‚ùå HTML muito pequeno: $size bytes"
              echo "FILES_OK=false" >> $GITHUB_ENV
              exit 1
            fi
          fi
        
      - name: Preparar arquivos para GitHub Pages
        run: |
          echo "üìÅ Preparando arquivos para GitHub Pages..."
          
          # Criar estrutura para GitHub Pages
          mkdir -p _site
          
          # Copiar arquivos para _site (estrutura do GitHub Pages)
          cp relatorio_livelo.html _site/index.html
          cp livelo_parceiros.xlsx _site/
          
          # Criar tamb√©m a pasta relatorios se necess√°rio
          mkdir -p _site/relatorios
          cp relatorio_livelo.html _site/relatorios/livelo_analytics.html
          
          echo "‚úÖ Arquivos preparados para GitHub Pages"
          echo "üìÇ Estrutura do _site:"
          ls -la _site/
          ls -la _site/relatorios/ 2>/dev/null || echo "Pasta relatorios criada"
          
      # Upload dos arquivos como artifact
      - name: Upload p√°ginas como artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site
          
      - name: Configurar Git para commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
      - name: Commit e push dos arquivos atualizados
        run: |
          echo "üíæ Fazendo commit dos arquivos atualizados..."
          
          timestamp=$(date +"%d/%m/%Y %H:%M")
          
          # Adicionar arquivos (manter estrutura original tamb√©m)
          git add -f relatorio_livelo.html
          git add -f livelo_parceiros.xlsx
          git add -f *.log 2>/dev/null || true
          
          # Verificar se h√° mudan√ßas para comitar
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada para commit"
          else
            echo "üìù Mudan√ßas detectadas, fazendo commit..."
            
            git commit -m "üìä Atualiza√ß√£o Livelo Analytics - $timestamp

            ‚úÖ Pipeline: Sucesso com valida√ß√£o rigorosa
            üìÑ Arquivos: Validados (min 50 parceiros)
            üìÅ Preparado para GitHub Pages
            ‚è∞ Executado: $timestamp"
            
            # Push com retry
            echo "üöÄ Fazendo push das mudan√ßas..."
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Push realizado com sucesso (tentativa $i)"
                break
              else
                echo "‚ö†Ô∏è Falha no push (tentativa $i)"
                sleep 5
                if [ $i -eq 3 ]; then
                  echo "‚ùå Push falhou ap√≥s 3 tentativas"
                  exit 1
                fi
              fi
            done
          fi

      - name: Firebase opcional (sem erro se falhar)
        if: env.FIREBASE_PROJECT_ID != ''
        run: |
          echo "üî• Tentando Firebase (opcional)..."
          
          if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "Firebase Project ID detectado"
            
            if [ -f "notification_sender.py" ]; then
              echo "üì± Executando notifica√ß√µes..."
              timeout 300 python notification_sender.py || echo "‚ö†Ô∏è Notifica√ß√µes falharam (n√£o cr√≠tico)"
            fi
          else
            echo "‚ÑπÔ∏è Firebase n√£o configurado (normal)"
          fi
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_VAPID_KEY: ${{ secrets.FIREBASE_VAPID_KEY }}
        continue-on-error: true

  # Deploy no GitHub Pages
  deploy:
    needs: scrape
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout de 10 minutos para deploy
    if: needs.scrape.result == 'success'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy para GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  # Job de resumo final
  summary:
    needs: [scrape, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Timeout de 5 minutos para summary
    if: always()
    
    steps:
      - name: Resumo final da execu√ß√£o
        run: |
          echo ""
          echo "üéâ RESUMO DA EXECU√á√ÉO LIVELO ANALYTICS"
          echo "====================================="
          echo "‚è∞ Conclu√≠do: $(date +'%d/%m/%Y %H:%M:%S')"
          echo ""
          echo "üìä STATUS:"
          echo "Pipeline: ${{ needs.scrape.result == 'success' && '‚úÖ Sucesso' || '‚ùå FALHOU - Email de notifica√ß√£o enviado' }}"
          echo "Deploy: ${{ needs.deploy.result == 'success' && '‚úÖ Realizado' || '‚ùå N√£o realizado devido a falha anterior' }}"
          echo ""
          
          if [ "${{ needs.scrape.result }}" = "success" ]; then
            echo "üåê ACESSO:"
            echo "üì± GitHub Pages: https://gcaressato.github.io/livelo_scraper/"
            echo ""
            echo "üìÅ ESTRUTURA:"
            echo "‚úÖ index.html (p√°gina principal)"
            echo "‚úÖ livelo_parceiros.xlsx (dados validados)"
            echo "‚úÖ relatorios/livelo_analytics.html (relat√≥rio)"
            echo ""
            echo "üîç VALIDA√á√ÉO RIGOROSA:"
            echo "‚úÖ M√≠nimo 50 parceiros coletados"
            echo "‚úÖ Arquivos com tamanho adequado"
            echo "‚úÖ Conte√∫do HTML bem formado"
            echo "‚úÖ Dados Excel estruturados"
            echo ""
            echo "‚úÖ Deploy realizado com sucesso!"
            echo "::notice::Sistema Livelo Analytics online - Dados validados com sucesso"
          else
            echo "‚ùå FALHA DETECTADA NO SCRAPING!"
            echo "üö® Poss√≠veis causas:"
            echo "   ‚Ä¢ Poucos dados coletados (< 50 parceiros)"
            echo "   ‚Ä¢ Mudan√ßas na estrutura do site"
            echo "   ‚Ä¢ Problemas de conectividade"
            echo "   ‚Ä¢ Bloqueio por anti-bot"
            echo "   ‚Ä¢ Erro no script de scraping"
            echo "   ‚Ä¢ Arquivos com tamanho insuficiente"
            echo ""
            echo "::error::Scraping falhou - Verificar logs detalhados para causa espec√≠fica"
          fi
