name: Livelo Analytics | Firebase Integrado
on:
  schedule:
    - cron: '0 10 * * *'  # 7h Brasil = 10h UTC
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  deployments: write

jobs:
  # JOB 1: PIPELINE PRINCIPAL (Scraping + An√°lise + GitHub Pages)
  pipeline_principal:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      pipeline_success: ${{ steps.validation.outputs.success }}
    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar depend√™ncias principais
        run: |
          pip install selenium webdriver-manager pandas openpyxl selenium-stealth plotly numpy requests
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          google-chrome --version
          
      - name: Criar diret√≥rios necess√°rios
        run: |
          mkdir -p logs
          mkdir -p public
          
      - name: Executar pipeline principal (main.py)
        run: |
          echo "üöÄ Iniciando pipeline Livelo Analytics..."
          python main.py 2>&1 | tee pipeline.log
          echo "PIPELINE_STATUS=$?" >> $GITHUB_ENV
        continue-on-error: true
          
      - name: Valida√ß√£o rigorosa dos resultados
        id: validation
        run: |
          echo "üìä Validando resultados do pipeline..."
          
          if [ "$PIPELINE_STATUS" = "0" ]; then
            echo "‚úÖ Pipeline executado com sucesso"
            echo "PIPELINE_OK=true" >> $GITHUB_ENV
          else
            echo "‚ùå Pipeline falhou - saindo imediatamente"
            echo "PIPELINE_OK=false" >> $GITHUB_ENV
            exit 1
          fi
          
          # Verificar arquivos cr√≠ticos na estrutura correta
          if [ -f "public/index.html" ] && [ -f "livelo_parceiros.xlsx" ]; then
            echo "‚úÖ Arquivos principais encontrados"
            ls -la public/index.html livelo_parceiros.xlsx
            echo "FILES_OK=true" >> $GITHUB_ENV
          else
            echo "‚ùå Arquivos principais ausentes"
            echo "üìÅ Verificando estrutura atual:"
            ls -la
            echo "üìÅ Conte√∫do da pasta public:"
            ls -la public/ 2>/dev/null || echo "Pasta public n√£o encontrada"
            echo "FILES_OK=false" >> $GITHUB_ENV
            exit 1
          fi
          
          # Verificar tamanho do HTML
          if [ -f "public/index.html" ]; then
            size=$(stat -f%z "public/index.html" 2>/dev/null || stat -c%s "public/index.html" 2>/dev/null || echo "0")
            if [ "$size" -gt 50000 ]; then
              echo "‚úÖ HTML v√°lido: $size bytes"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå HTML muito pequeno: $size bytes"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: üîê Substituir placeholders Firebase no Service Worker
        if: env.PIPELINE_OK == 'true'
        run: |
          echo "üîß Substituindo placeholders no firebase-messaging-sw.js..."
          
          if [ -f "public/firebase-messaging-sw.js" ]; then
            # Fazer backup do original
            cp public/firebase-messaging-sw.js public/firebase-messaging-sw.js.backup
            
            # Substituir placeholders com sed
            sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY }}/g' public/firebase-messaging-sw.js
            sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' public/firebase-messaging-sw.js
            sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID }}/g' public/firebase-messaging-sw.js
            sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' public/firebase-messaging-sw.js
            sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' public/firebase-messaging-sw.js
            sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID }}/g' public/firebase-messaging-sw.js
            
            echo "‚úÖ Placeholders substitu√≠dos no Service Worker"
          else
            echo "‚ö†Ô∏è Arquivo public/firebase-messaging-sw.js n√£o encontrado"
          fi
      
      - name: üîê Substituir placeholders Firebase no config runtime
        if: env.PIPELINE_OK == 'true'
        run: |
          echo "üîß Substituindo placeholders no firebase-config-runtime.js..."
          
          if [ -f "firebase-config-runtime.js" ]; then
            # Fazer backup do original
            cp firebase-config-runtime.js firebase-config-runtime.js.backup
            
            # Substituir placeholders
            sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID }}/g' firebase-config-runtime.js
            sed -i 's/{{FIREBASE_VAPID_KEY}}/${{ secrets.FIREBASE_VAPID_KEY }}/g' firebase-config-runtime.js
            
            echo "‚úÖ Placeholders substitu√≠dos no config runtime"
          else
            echo "‚ö†Ô∏è Arquivo firebase-config-runtime.js n√£o encontrado"
          fi
      
      - name: üîê Substituir placeholders Firebase em outros arquivos
        if: env.PIPELINE_OK == 'true'
        run: |
          echo "üîß Verificando outros arquivos Firebase..."
          
          # Verificar e substituir em sender/firebase-config.js se existir
          if [ -f "sender/firebase-config.js" ]; then
            echo "üìÑ Processando sender/firebase-config.js..."
            cp sender/firebase-config.js sender/firebase-config.js.backup
            
            sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY }}/g' sender/firebase-config.js
            sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' sender/firebase-config.js
            sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID }}/g' sender/firebase-config.js
            sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' sender/firebase-config.js
            sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' sender/firebase-config.js
            sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID }}/g' sender/firebase-config.js
            
            echo "‚úÖ sender/firebase-config.js processado"
          fi
          
          # Verificar outros arquivos .js no public que podem ter placeholders
          find public -name "*.js" -not -name "firebase-messaging-sw.js" | while read -r file; do
            if grep -q "{{FIREBASE" "$file" 2>/dev/null; then
              echo "üìÑ Processando $file..."
              cp "$file" "$file.backup"
              
              sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY }}/g' "$file"
              sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' "$file"
              sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID }}/g' "$file"
              sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' "$file"
              sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' "$file"
              sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID }}/g' "$file"
              sed -i 's/{{FIREBASE_VAPID_KEY}}/${{ secrets.FIREBASE_VAPID_KEY }}/g' "$file"
              
              echo "‚úÖ $file processado"
            fi
          done
      
      - name: üîç Verificar substitui√ß√µes Firebase
        if: env.PIPELINE_OK == 'true'
        run: |
          echo "üîç Verificando se todas as substitui√ß√µes foram realizadas..."
          
          ERROR_FOUND=false
          
          # Verificar Service Worker
          if [ -f "public/firebase-messaging-sw.js" ]; then
            if grep -q "{{FIREBASE" public/firebase-messaging-sw.js; then
              echo "‚ùå ERRO: Placeholders n√£o substitu√≠dos no Service Worker:"
              grep "{{FIREBASE" public/firebase-messaging-sw.js || true
              ERROR_FOUND=true
            else
              echo "‚úÖ Service Worker: Todos os placeholders substitu√≠dos"
              
              # Verificar se a configura√ß√£o parece v√°lida
              if grep -q "livel-analytics" public/firebase-messaging-sw.js; then
                echo "‚úÖ Service Worker: Configura√ß√£o Firebase detectada"
              fi
            fi
          fi
          
          # Verificar config runtime
          if [ -f "firebase-config-runtime.js" ]; then
            if grep -q "{{FIREBASE" firebase-config-runtime.js; then
              echo "‚ùå ERRO: Placeholders n√£o substitu√≠dos no config runtime:"
              grep "{{FIREBASE" firebase-config-runtime.js || true
              ERROR_FOUND=true
            else
              echo "‚úÖ Config Runtime: Todos os placeholders substitu√≠dos"
            fi
          fi
          
          # Verificar outros arquivos
          find . -name "*.js" -not -path "./node_modules/*" -not -name "*.backup" | while read -r file; do
            if grep -q "{{FIREBASE" "$file" 2>/dev/null; then
              echo "‚ö†Ô∏è Placeholders encontrados em: $file"
              grep "{{FIREBASE" "$file" || true
            fi
          done
          
          if [ "$ERROR_FOUND" = true ]; then
            echo "‚ùå FALHA: Alguns placeholders n√£o foram substitu√≠dos!"
            echo "üîç Verificando se os secrets est√£o configurados..."
            
            if [ -z "${{ secrets.FIREBASE_API_KEY }}" ]; then
              echo "‚ùå FIREBASE_API_KEY n√£o est√° configurado nos secrets"
            fi
            if [ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
              echo "‚ùå FIREBASE_PROJECT_ID n√£o est√° configurado nos secrets"
            fi
            
            echo "üìã Para configurar os secrets:"
            echo "   1. V√° em Settings > Secrets and Variables > Actions"
            echo "   2. Configure todos os secrets do Firebase"
            echo ""
            echo "‚ö†Ô∏è Continuando sem Firebase (funcionalidade opcional)"
          else
            echo "üéâ Todas as substitui√ß√µes Firebase realizadas com sucesso!"
            
            # Mostrar preview das configura√ß√µes (sem revelar valores completos)
            echo ""
            echo "üìã Preview das configura√ß√µes aplicadas:"
            echo "   - API Key: $(echo '${{ secrets.FIREBASE_API_KEY }}' | cut -c1-10)..."
            echo "   - Project ID: ${{ secrets.FIREBASE_PROJECT_ID }}"
            echo "   - Messaging Sender: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          fi
      
      - name: üìÅ Copiar firebase-config-runtime.js para public
        if: env.PIPELINE_OK == 'true'
        run: |
          echo "üìÑ Copiando firebase-config-runtime.js para public/..."
          
          if [ -f "firebase-config-runtime.js" ]; then
            cp firebase-config-runtime.js public/firebase-config-runtime.js
            echo "‚úÖ firebase-config-runtime.js copiado para public/"
          else
            echo "‚ö†Ô∏è firebase-config-runtime.js n√£o encontrado na raiz"
          fi
        
      - name: Preparar arquivos para GitHub Pages
        run: |
          echo "üìÅ Preparando arquivos para GitHub Pages..."
          
          # Criar estrutura limpa para GitHub Pages
          mkdir -p _site
          
          # ‚úÖ COPIAR APENAS O NECESS√ÅRIO (SEM DUPLICATAS)
          echo "üìÑ Copiando public/index.html ‚Üí _site/index.html"
          cp public/index.html _site/index.html
          
          echo "üìÑ Copiando livelo_parceiros.xlsx ‚Üí _site/livelo_parceiros.xlsx"
          cp livelo_parceiros.xlsx _site/livelo_parceiros.xlsx
          
          # ‚úÖ COPIAR OUTROS ARQUIVOS DO PUBLIC (Firebase, manifest, etc.)
          echo "üìÇ Copiando arquivos de configura√ß√£o do public/..."
          find public -name "*.js" -o -name "*.json" -o -name "*.png" -o -name "*.ico" | while read file; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "index.html" ]; then
              cp "$file" "_site/$(basename "$file")"
              echo "üìÑ Copiado: $file ‚Üí _site/$(basename "$file")"
            fi
          done
          
          echo "‚úÖ Arquivos preparados para GitHub Pages (estrutura limpa)"
          echo "üìÇ Estrutura final do _site:"
          ls -la _site/
          
      - name: Upload p√°ginas como artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site
          
      - name: Debug artifact content
        run: |
          echo "üìã Conte√∫do detalhado do artifact (_site):"
          find _site -type f -name "*.html" -exec sh -c 'echo "üìÑ {}: $(wc -c < "{}" | tr -d " ") bytes"' \;
          
          echo ""
          echo "üìã Estrutura completa:"
          find _site -type f | head -20
          
          echo ""
          echo "üîç Verificando se index.html tem conte√∫do v√°lido:"
          if [ -f "_site/index.html" ]; then
            head -10 _site/index.html
            echo "..."
            echo "Total de linhas: $(wc -l < _site/index.html)"
          else
            echo "‚ùå _site/index.html n√£o encontrado!"
          fi
          
      - name: Configurar Git e fazer commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          timestamp=$(date +"%d/%m/%Y %H:%M")
          commit_hash=$(git rev-parse --short HEAD)
          
          # Adicionar arquivos da estrutura atual
          git add -f public/index.html
          git add -f livelo_parceiros.xlsx
          git add -f *.log 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada para commit"
          else
            echo "üìù Fazendo commit das mudan√ßas..."
            
            git commit -m "üìä Atualiza√ß√£o Livelo Analytics - $timestamp

            ‚úÖ Pipeline: Sucesso com valida√ß√£o rigorosa
            üìÑ HTML: public/index.html ($(stat -c%s public/index.html 2>/dev/null || echo '0') bytes)
            üìÑ Excel: livelo_parceiros.xlsx ($(stat -c%s livelo_parceiros.xlsx 2>/dev/null || echo '0') bytes)
            üöÄ Deploy: Estrutura limpa (sem duplicatas)
            üîÑ Commit anterior: $commit_hash
            ‚è∞ Executado: $timestamp"
            
            # Push com retry
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Push realizado com sucesso (tentativa $i)"
                break
              else
                echo "‚ö†Ô∏è Falha no push (tentativa $i)"
                sleep 5
                if [ $i -eq 3 ]; then
                  echo "‚ùå Push falhou ap√≥s 3 tentativas"
                  exit 1
                fi
              fi
            done
          fi

  # JOB 2: DEPLOY GITHUB PAGES (MELHORADO)
  deploy_github_pages:
    needs: pipeline_principal
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.pipeline_principal.outputs.pipeline_success == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Verificar artifact antes do deploy
        run: |
          echo "üîç Verificando artifacts dispon√≠veis..."
          echo "Workflow Run ID: ${{ github.run_id }}"
          
      - name: Deploy para GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          
      - name: Verificar e aguardar propaga√ß√£o
        run: |
          echo "üöÄ Deploy conclu√≠do!"
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìã Deploy ID: ${{ github.sha }}"
          echo "üïê Deploy timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          # ‚úÖ FOR√áA INVALIDA√á√ÉO DE CACHE
          echo "üîÑ For√ßando invalida√ß√£o de cache..."
          
          # Aguardar propaga√ß√£o inicial
          echo "‚è≥ Aguardando propaga√ß√£o (45 segundos)..."
          sleep 45
          
          # Tentar fazer requisi√ß√µes com diferentes user-agents para for√ßar cache refresh
          echo "üîç Testando disponibilidade do site..."
          
          MAX_ATTEMPTS=6
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Tentativa $ATTEMPT de $MAX_ATTEMPTS..."
            
            # Usar diferentes estrat√©gias para testar
            if curl -s -f -H "Cache-Control: no-cache" -H "Pragma: no-cache" "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
              echo "‚úÖ Site est√° respondendo!"
              
              # Verificar se o HTML cont√©m dados atualizados
              if curl -s "${{ steps.deployment.outputs.page_url }}" | grep -q "Livelo Analytics Pro"; then
                echo "‚úÖ Conte√∫do HTML verificado!"
                break
              else
                echo "‚ö†Ô∏è HTML carregado mas conte√∫do pode estar desatualizado"
              fi
            else
              echo "‚è≥ Site ainda n√£o est√° respondendo, aguardando..."
              sleep 20
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "‚ö†Ô∏è Site pode levar mais alguns minutos para ficar dispon√≠vel"
            echo "üí° GitHub Pages √†s vezes demora 5-15 minutos para propaga√ß√£o completa"
            echo "üîç Teste em modo an√¥nimo ou com Ctrl+F5 para for√ßar atualiza√ß√£o"
          else
            echo "üéâ Deploy verificado e funcionando!"
          fi

  # JOB 3: FIREBASE INTEGRATION (Mantido como estava)
  firebase_integration:
    needs: [pipeline_principal, deploy_github_pages]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always() && needs.pipeline_principal.outputs.pipeline_success == 'true'
    
    steps:
      - name: Checkout para Firebase
        uses: actions/checkout@v4
        
      - name: Setup Node.js para Firebase
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Setup Python para notifica√ß√µes
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Instalar depend√™ncias Firebase
        run: |
          if [ -f "package.json" ]; then
            echo "üì¶ Instalando depend√™ncias do package.json..."
            npm install
          else
            echo "üì¶ package.json n√£o encontrado, criando depend√™ncias m√≠nimas..."
            npm init -y
            npm install firebase@^9.0.0
          fi
          
          npm install -g firebase-tools
          pip install firebase-admin pandas openpyxl
          
      - name: Verificar configura√ß√£o Firebase
        run: |
          echo "üîç Verificando configura√ß√£o Firebase..."
          
          if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "‚úÖ FIREBASE_PROJECT_ID configurado"
            echo "FIREBASE_CONFIGURED=true" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è FIREBASE_PROJECT_ID n√£o configurado"
            echo "FIREBASE_CONFIGURED=false" >> $GITHUB_ENV
          fi
          
          if [ -n "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "‚úÖ FIREBASE_SERVICE_ACCOUNT configurado"
          else
            echo "‚ÑπÔ∏è FIREBASE_SERVICE_ACCOUNT n√£o configurado"
            echo "FIREBASE_CONFIGURED=false" >> $GITHUB_ENV
          fi
          
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "‚úÖ FIREBASE_TOKEN configurado"
          else
            echo "‚ÑπÔ∏è FIREBASE_TOKEN n√£o configurado"
          fi
          
      - name: Sincronizar arquivos do pipeline
        run: |
          echo "üì• Sincronizando arquivos do pipeline..."
          git pull origin main || echo "Nenhuma mudan√ßa para sincronizar"
          
          if [ -f "public/index.html" ] && [ -f "livelo_parceiros.xlsx" ]; then
            echo "‚úÖ Arquivos encontrados"
            ls -la public/index.html livelo_parceiros.xlsx
          else
            echo "‚ùå Arquivos n√£o encontrados ap√≥s sincroniza√ß√£o"
            exit 1
          fi
          
      - name: Executar notifica√ß√µes
        if: env.FIREBASE_CONFIGURED == 'true'
        run: |
          echo "üì± Executando notifica√ß√µes..."
          
          if [ -f "notification_sender.py" ]; then
            timeout 300 python notification_sender.py || echo "Notifica√ß√µes conclu√≠das"
          else
            echo "notification_sender.py n√£o encontrado"
          fi
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_VAPID_KEY: ${{ secrets.FIREBASE_VAPID_KEY }}
        continue-on-error: true

  # JOB 4: RESUMO FINAL
  summary:
    needs: [pipeline_principal, deploy_github_pages, firebase_integration]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: Resumo final da execu√ß√£o
        run: |
          echo ""
          echo "üéâ RESUMO DA EXECU√á√ÉO LIVELO ANALYTICS"
          echo "====================================="
          echo "‚è∞ Conclu√≠do: $(date +'%d/%m/%Y %H:%M:%S')"
          echo "üîó Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "üìä STATUS DOS JOBS:"
          echo "‚îú‚îÄ Pipeline Principal: ${{ needs.pipeline_principal.result == 'success' && '‚úÖ SUCESSO' || '‚ùå FALHOU' }}"
          echo "‚îú‚îÄ GitHub Pages: ${{ needs.deploy_github_pages.result == 'success' && '‚úÖ SUCESSO' || '‚ùå FALHOU' }}"
          echo "‚îî‚îÄ Firebase: ${{ needs.firebase_integration.result == 'success' && '‚úÖ SUCESSO' || '‚ö™ OPCIONAL' }}"
          echo ""
          
          if [ "${{ needs.pipeline_principal.result }}" = "success" ]; then
            echo "üåê SISTEMA ONLINE:"
            echo "‚îú‚îÄ GitHub Pages: https://gcaressato.github.io/livelo_scraper/"
            
            if [ "${{ needs.deploy_github_pages.result }}" = "success" ]; then
              echo "‚îú‚îÄ üïê Deploy conclu√≠do - aguarde 2-5 min para propaga√ß√£o"
              echo "‚îú‚îÄ üí° Use Ctrl+F5 para for√ßar atualiza√ß√£o do cache"
              echo "‚îú‚îÄ üîç Teste em modo an√¥nimo se necess√°rio"
            fi
            
            if [ "${{ needs.firebase_integration.result }}" = "success" ]; then
              echo "‚îî‚îÄ Firebase: ‚úÖ Notifica√ß√µes ativas"
            else
              echo "‚îî‚îÄ Firebase: ‚ö™ N√£o configurado (opcional)"
            fi
            
            echo ""
            echo "‚úÖ SISTEMA FUNCIONANDO NORMALMENTE!"
            echo "::notice::Livelo Analytics online - Estrutura limpa sem duplicatas"
          else
            echo "‚ùå FALHA NO PIPELINE PRINCIPAL!"
            echo "::error::Sistema principal falhou - Verificar logs para diagn√≥stico"
          fi
