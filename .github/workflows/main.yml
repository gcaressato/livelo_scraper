name: Livelo Partners Scraper
on:
  schedule:
    - cron: '0 12 * * *'  # Executa todos os dias √†s 12:00 UTC
  workflow_dispatch:  # Permite execu√ß√£o manual

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar depend√™ncias
        run: |
          pip install selenium webdriver-manager pandas openpyxl selenium-stealth plotly numpy requests
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          google-chrome --version
          
      - name: Verificar ambiente
        run: |
          echo "Diret√≥rio atual: $(pwd)"
          echo "Conte√∫do do diret√≥rio: $(ls -la)"
          
      - name: Criar diret√≥rios para logs e sa√≠da
        run: |
          mkdir -p logs
          mkdir -p relatorios
          
      - name: Executar scraper diretamente (para depura√ß√£o)
        run: |
          python livelo_scraper.py 2>&1 | tee scraper_debug.log
        continue-on-error: true
          
      - name: Executar script principal
        run: |
          python main.py 2>&1 | tee output.log
        continue-on-error: true

      # DEBUG - Verificar secrets (SEM EXPOR VALORES)
      - name: Debug configura√ß√µes Firebase
        run: |
          echo "üîç Verificando secrets (sem expor valores)..."
          echo "API Key presente: $([[ -n '${{ secrets.FIREBASE_API_KEY }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "Project ID presente: $([[ -n '${{ secrets.FIREBASE_PROJECT_ID }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "Sender ID presente: $([[ -n '${{ secrets.FIREBASE_SENDER_ID }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "App ID presente: $([[ -n '${{ secrets.FIREBASE_APP_ID }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "VAPID Key presente: $([[ -n '${{ secrets.FIREBASE_VAPID_KEY }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "Server Key presente: $([[ -n '${{ secrets.FIREBASE_SERVER_KEY }}' ]] && echo 'SIM' || echo 'N√ÉO')"
          echo "Service Account presente: $([[ -n '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' ]] && echo 'SIM' || echo 'N√ÉO')"
        
      # VALIDA√á√ÉO INTELIGENTE DE DADOS
      - name: Validar qualidade dos dados
        id: validate
        run: |
          python -c "
          import pandas as pd
          from datetime import datetime, timedelta
          import os
          
          success = True
          
          try:
              if not os.path.exists('livelo_parceiros.xlsx'):
                  print('‚ùå Arquivo Excel n√£o encontrado!')
                  success = False
              else:
                  df = pd.read_excel('livelo_parceiros.xlsx')
                  df['Timestamp'] = pd.to_datetime(df['Timestamp'])
                  latest_date = df['Timestamp'].max()
                  now = datetime.now()
                  
                  if (now - latest_date).total_seconds() > 86400:
                      print(f'‚ö†Ô∏è Dados podem estar antigos! √öltimo: {latest_date}')
                  
                  if len(df) < 30:
                      print(f'‚ö†Ô∏è Poucos dados coletados: {len(df)} registros')
                  else:
                      print(f'‚úÖ Dados validados: {len(df)} registros, √∫ltimo em {latest_date}')
              
              if not os.path.exists('relatorio_livelo.html'):
                  print('‚ùå HTML n√£o foi gerado!')
                  success = False
              else:
                  print('‚úÖ HTML gerado com sucesso')
              
              if success:
                  print('VALIDATION_SUCCESS=true')
              else:
                  print('VALIDATION_FAILED=true')
                  
          except Exception as e:
              print(f'‚ùå Erro na valida√ß√£o: {e}')
              print('VALIDATION_ERROR=true')
          " 2>&1 | tee validation.log
        continue-on-error: true
        
      # ============ FIREBASE CONFIGURA√á√ÉO SIMPLIFICADA ============
      
      - name: Verificar secrets Firebase essenciais
        id: check_firebase
        run: |
          missing_count=0
          
          # Verificar apenas os secrets essenciais para funcionar
          if [[ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]]; then
            echo "‚ùå FIREBASE_PROJECT_ID ausente"
            missing_count=$((missing_count + 1))
          fi
          
          if [[ -z "${{ secrets.FIREBASE_SERVER_KEY }}" ]]; then
            echo "‚ùå FIREBASE_SERVER_KEY ausente"
            missing_count=$((missing_count + 1))
          fi
          
          # Verificar tamanho da server key (deve ser longa)
          server_key_length=$(echo -n "${{ secrets.FIREBASE_SERVER_KEY }}" | wc -c)
          if [[ $server_key_length -lt 100 ]]; then
            echo "‚ö†Ô∏è FIREBASE_SERVER_KEY muito curta ($server_key_length chars) - deve ter 100+ caracteres"
            echo "üí° Verifique se o secret est√° correto no GitHub"
            missing_count=$((missing_count + 1))
          fi
          
          if [[ $missing_count -eq 0 ]]; then
            echo "‚úÖ Firebase b√°sico configurado corretamente"
            echo "FIREBASE_OK=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå $missing_count problemas na configura√ß√£o Firebase"
            echo "FIREBASE_OK=false" >> $GITHUB_OUTPUT
          fi

      - name: Criar configura√ß√£o Firebase usando dados est√°ticos
        run: |
          # Usar dados do firebase-config.json existente ao inv√©s de secrets
          # Isso evita problemas de substitui√ß√£o de placeholders
          
          cat > firebase-config-runtime.js << 'EOF'
          // Configura√ß√£o Firebase (dados est√°ticos do projeto)
          window.firebaseConfig = {
              apiKey: "AIzaSyAibNVfTL0kvG_R3rKYYSnAeQWc5oVBFYk",
              authDomain: "livel-analytics.firebaseapp.com",
              projectId: "livel-analytics",
              storageBucket: "livel-analytics.appspot.com",
              messagingSenderId: "168707812242",
              appId: "1:168707812242:web:59b4c1df4fc553410c6f4b"
          };
          
          // VAPID key seria aqui se fosse necess√°ria
          window.firebaseVapidKey = "BFj3Q_8s8Z_9wQ4kKy4Q8x9QC_6bY7j5P_8mA9k7B3f_EXAMPLE_KEY";
          
          console.log('üî• Firebase config est√°tica carregada:', window.firebaseConfig.projectId);
          EOF
          
          echo "‚úÖ Configura√ß√£o Firebase est√°tica criada"

      - name: Criar Service Worker Firebase simplificado
        run: |
          cat > sw.js << 'EOF'
          // Service Worker para Firebase Messaging v9
          importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
          importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

          console.log('[SW] Service Worker carregando...');

          const firebaseConfig = {
              apiKey: "AIzaSyAibNVfTL0kvG_R3rKYYSnAeQWc5oVBFYk",
              authDomain: "livel-analytics.firebaseapp.com",
              projectId: "livel-analytics",
              storageBucket: "livel-analytics.appspot.com",
              messagingSenderId: "168707812242",
              appId: "1:168707812242:web:59b4c1df4fc553410c6f4b"
          };

          let messaging;

          try {
              if (!firebase.apps.length) {
                  firebase.initializeApp(firebaseConfig);
              }
              
              messaging = firebase.messaging();
              console.log('[SW] Firebase Messaging inicializado');
              
              messaging.onBackgroundMessage(function(payload) {
                  console.log('[SW] Mensagem em background recebida:', payload);
                  
                  const notificationTitle = payload.notification?.title || 'Livelo Analytics';
                  const notificationOptions = {
                      body: payload.notification?.body || 'Nova oferta dispon√≠vel!',
                      icon: 'https://via.placeholder.com/192x192/ff0a8c/ffffff?text=L',
                      badge: 'https://via.placeholder.com/96x96/ff0a8c/ffffff?text=L',
                      tag: 'livelo-offer',
                      requireInteraction: true,
                      data: payload.data || {},
                      actions: [
                          {
                              action: 'view',
                              title: 'üëÄ Ver Oferta'
                          },
                          {
                              action: 'dismiss',
                              title: '‚úñÔ∏è Dispensar'
                          }
                      ]
                  };
                  
                  return self.registration.showNotification(notificationTitle, notificationOptions);
              });
              
          } catch (error) {
              console.error('[SW] Erro ao inicializar Firebase:', error);
          }

          self.addEventListener('notificationclick', function(event) {
              console.log('[SW] Clique na notifica√ß√£o:', event.action);
              event.notification.close();
              
              if (event.action === 'view') {
                  event.waitUntil(
                      clients.openWindow('https://gcaressato.github.io/livelo_scraper/')
                  );
              }
          });

          self.addEventListener('activate', function(event) {
              console.log('[SW] Service Worker ativado');
              event.waitUntil(self.clients.claim());
          });

          self.addEventListener('install', function(event) {
              console.log('[SW] Service Worker instalado');
              self.skipWaiting();
          });
          EOF
          
          echo "‚úÖ Service Worker criado"

      - name: Criar manifest.json
        run: |
          cat > manifest.json << 'EOF'
          {
            "name": "Livelo Analytics Pro",
            "short_name": "Livelo",
            "description": "Dashboard anal√≠tico para ofertas Livelo com notifica√ß√µes push",
            "start_url": "./",
            "scope": "./",
            "display": "standalone",
            "background_color": "#151f4f",
            "theme_color": "#ff0a8c",
            "orientation": "portrait-primary",
            "icons": [
              {
                "src": "https://via.placeholder.com/192x192/ff0a8c/ffffff?text=L",
                "sizes": "192x192",
                "type": "image/png",
                "purpose": "maskable any"
              },
              {
                "src": "https://via.placeholder.com/512x512/ff0a8c/ffffff?text=L", 
                "sizes": "512x512",
                "type": "image/png",
                "purpose": "maskable any"
              }
            ],
            "gcm_sender_id": "168707812242"
          }
          EOF
          
          echo "‚úÖ Manifest PWA criado"
      
      - name: Enviar notifica√ß√µes push para usu√°rios
        if: steps.check_firebase.outputs.FIREBASE_OK == 'true'
        run: |
          echo "üîî Iniciando envio de notifica√ß√µes push..."
          python notification_sender.py 2>&1 | tee notifications.log
        env:
          FIREBASE_PROJECT_ID: livel-analytics
          FIREBASE_SERVER_KEY: ${{ secrets.FIREBASE_SERVER_KEY }}
        continue-on-error: true
        
      - name: Verificar falhas na execu√ß√£o
        run: |
          if cat output.log | grep -q "Falha no scraper\|Falha no reporter\|ERRO FATAL"; then
            echo "::warning::Falhas detectadas na execu√ß√£o!"
            grep -A 10 "Falha\|ERRO" output.log || true
            echo "SCRAPING_FALHOU=true" >> $GITHUB_ENV
          else
            echo "Nenhuma falha detectada na execu√ß√£o."
            echo "SCRAPING_FALHOU=false" >> $GITHUB_ENV
          fi
      
      # CRIAR ISSUE AUTOM√ÅTICA SE FALHOU
      - name: Criar issue se scraper falhou
        if: env.SCRAPING_FALHOU == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® Scraper falhou em ${new Date().toLocaleString('pt-BR')}`;
            const body = `
            ## ‚ùå Falha no Scraper Livelo
            
            **‚è∞ Hor√°rio:** ${new Date().toLocaleString('pt-BR', {timeZone: 'America/Sao_Paulo'})}
            **üîó Logs:** [Ver detalhes](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ### Poss√≠veis causas:
            - [ ] Site mudou estrutura HTML
            - [ ] Elementos foram alterados  
            - [ ] Timeout de conex√£o
            - [ ] Erro no processamento dos dados
            
            ### ‚ö†Ô∏è A√ß√£o necess√°ria:
            1. Verificar logs do workflow
            2. Testar scraper localmente
            3. Ajustar seletores se necess√°rio
            4. Fechar esta issue ap√≥s corre√ß√£o
            `;
            
            // Verificar se j√° existe issue aberta
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'scraper-failure'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['scraper-failure', 'urgent']
              });
            }
      
      - name: Listar arquivos de diagn√≥stico
        run: |
          echo "üìÅ Arquivos HTML gerados:"
          ls -la *.html 2>/dev/null || echo "Nenhum arquivo HTML encontrado"
          
          echo "üìÅ Arquivos de log gerados:"
          ls -la *.log 2>/dev/null || echo "Nenhum arquivo de log encontrado"
          
          echo "üìÅ Screenshots gerados:"
          ls -la *.png 2>/dev/null || echo "Nenhum screenshot encontrado"
          
          echo "üìÅ Arquivos PWA/Firebase:"
          ls -la sw.js manifest.json firebase-config-runtime.js 2>/dev/null || echo "Arquivos PWA n√£o encontrados"
          
          echo "üìÅ Arquivos de dados:"
          ls -la *.xlsx *.json 2>/dev/null || echo "Arquivos de dados n√£o encontrados"
      
      - name: Configurar Git para commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
      - name: Commit e push dos novos dados
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          
          # Copiar logs com timestamp
          if [ -f "output.log" ]; then
            cp output.log "logs/scraper_${timestamp}.log"
          fi
          
          if [ -f "notifications.log" ]; then
            cp notifications.log "logs/notifications_${timestamp}.log"
          fi
          
          if [ -f "validation.log" ]; then
            cp validation.log "logs/validation_${timestamp}.log"
          fi
          
          # Adicionar arquivos principais
          git add -f *.html *.xlsx *.json sw.js manifest.json firebase-config-runtime.js 2>/dev/null || true
          
          # Adicionar logs
          git add logs/ relatorios/ 2>/dev/null || true
          
          # Adicionar arquivos de debug
          git add -f debug_*.* *.log 2>/dev/null || true
          
          # Verificar se h√° algo para comitar
          if git diff --staged --quiet; then
            echo "‚úÖ Nenhuma mudan√ßa para comitar"
          else
            commit_message="üìä Atualiza√ß√£o autom√°tica Livelo Analytics [$(date +'%d/%m/%Y %H:%M')]
            
            üîß Firebase: ${{ steps.check_firebase.outputs.FIREBASE_OK == 'true' && 'Configurado' || 'Com problemas' }}
            üìà Scraping: ${{ env.SCRAPING_FALHOU == 'true' && 'Falhou' || 'Sucesso' }}
            ‚è∞ Timestamp: ${timestamp}"
            
            git commit -m "$commit_message"
            
            # Push com retry
            for i in {1..3}; do
              if git push; then
                echo "‚úÖ Push realizado com sucesso (tentativa $i)"
                break
              else
                echo "‚ö†Ô∏è Falha no push (tentativa $i), tentando novamente..."
                sleep 5
              fi
            done
          fi
      
      # ============ GITHUB PAGES DEPLOY ============
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Configurar diret√≥rio de publica√ß√£o
        run: |
          mkdir -p ./public
          
          echo "üìÅ Copiando arquivos para o diret√≥rio public..."
          
          # Copiar HTML principal
          if [ -f "relatorio_livelo.html" ]; then
            cp relatorio_livelo.html ./public/index.html
            echo "‚úÖ HTML principal copiado"
          else
            echo "‚ùå relatorio_livelo.html n√£o encontrado - criando p√°gina de erro"
            cat > ./public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <title>Livelo Analytics - Em Manuten√ß√£o</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
          </head>
          <body>
            <h1>üîß Sistema em Manuten√ß√£o</h1>
            <p>O dashboard est√° sendo atualizado. Tente novamente em alguns minutos.</p>
          </body>
          </html>
          EOF
          fi
          
          # Copiar arquivos PWA
          for file in manifest.json sw.js firebase-config-runtime.js; do
            if [ -f "$file" ]; then
              cp "$file" ./public/
              echo "‚úÖ $file copiado"
            else
              echo "‚ö†Ô∏è $file n√£o encontrado"
            fi
          done
          
          # Copiar outros arquivos √∫teis
          cp -f *.xlsx ./public/ 2>/dev/null || echo "üìä Nenhum arquivo Excel para copiar"
          
          echo "üìÇ Conte√∫do do diret√≥rio public:"
          ls -la ./public/
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Deploy para GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: public
          branch: gh-pages
          clean: true

      # ============ FIREBASE HOSTING (OPCIONAL) ============
      
      - name: Deploy Firebase Hosting (se configurado)
        if: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: livel-analytics
          entryPoint: .
        continue-on-error: true

      # ============ RESUMO FINAL ============
      
      - name: Resumo da execu√ß√£o
        run: |
          echo "
          üìä RESUMO DA EXECU√á√ÉO LIVELO ANALYTICS
          ========================================
          ‚è∞ Hor√°rio: $(date +'%d/%m/%Y %H:%M:%S %Z')
          üìÅ Arquivos no public: $(ls -1 ./public/ 2>/dev/null | wc -l) arquivos
          
          üîç STATUS DOS COMPONENTES:
          ‚úÖ Scraping: ${{ env.SCRAPING_FALHOU == 'true' && '‚ùå FALHOU' || '‚úÖ SUCESSO' }}
          üåê GitHub Pages: ‚úÖ Deployado
          üî• Firebase Messaging: ${{ steps.check_firebase.outputs.FIREBASE_OK == 'true' && '‚úÖ Ativo' || '‚ö†Ô∏è Com problemas' }}
          üè† Firebase Hosting: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' && '‚úÖ Configurado' || '‚ö†Ô∏è N√£o configurado' }}
          üîî Notifica√ß√µes: ${{ steps.check_firebase.outputs.FIREBASE_OK == 'true' && '‚úÖ Processadas' || '‚ö†Ô∏è Puladas' }}
          
          üåç ACESSO:
          üìñ GitHub Pages: https://gcaressato.github.io/livelo_scraper/
          üî• Firebase Hosting: https://livel-analytics.web.app/ (se configurado)
          "
          
          if [ "${{ env.SCRAPING_FALHOU }}" = "true" ]; then
            echo "::warning::‚ö†Ô∏è Scraper falhou mas deploy foi mantido com dados existentes"
          else
            echo "::notice::üéâ Deploy conclu√≠do com sucesso!"
          fi
